#!/usr/bin/env python3
"""
Script de d√©ploiement des corrections de formatage des montants
D√©ploie les modifications backend sur le serveur de production
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def run_command(command, cwd=None):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            cwd=cwd,
            capture_output=True, 
            text=True, 
            check=True
        )
        logger.info(f"‚úÖ Commande r√©ussie: {command}")
        if result.stdout:
            logger.info(f"Output: {result.stdout}")
        return result
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur commande: {command}")
        logger.error(f"Error: {e.stderr}")
        return None

def deploy_backend_fixes():
    """D√©ploie les corrections backend sur le serveur de production"""
    
    logger.info("üöÄ D√©but du d√©ploiement des corrections de formatage des montants")
    
    # Chemin vers le backend
    backend_path = Path(__file__).parent / "xamila_backend"
    
    if not backend_path.exists():
        logger.error(f"‚ùå R√©pertoire backend non trouv√©: {backend_path}")
        return False
    
    logger.info(f"üìÅ R√©pertoire backend: {backend_path}")
    
    # 1. Collecter les fichiers statiques
    logger.info("üì¶ Collection des fichiers statiques...")
    if not run_command("python manage.py collectstatic --noinput", cwd=backend_path):
        logger.error("‚ùå √âchec de la collection des fichiers statiques")
        return False
    
    # 2. V√©rifier la syntaxe Python
    logger.info("üîç V√©rification de la syntaxe des fichiers modifi√©s...")
    files_to_check = [
        "core/views_savings.py",
        "core/views_dashboard.py"
    ]
    
    for file_path in files_to_check:
        full_path = backend_path / file_path
        if full_path.exists():
            if not run_command(f"python -m py_compile {file_path}", cwd=backend_path):
                logger.error(f"‚ùå Erreur de syntaxe dans {file_path}")
                return False
            logger.info(f"‚úÖ Syntaxe OK: {file_path}")
        else:
            logger.warning(f"‚ö†Ô∏è  Fichier non trouv√©: {file_path}")
    
    # 3. Cr√©er un script de red√©marrage
    restart_script = """#!/bin/bash
echo "Redemarrage du service Xamila..."

# Arreter le service
sudo systemctl stop xamila
echo "Service arrete"

# Attendre un moment
sleep 2

# Redemarrer le service
sudo systemctl start xamila
echo "Service redemarre"

# Verifier le statut
sudo systemctl status xamila --no-pager -l
echo "Verification du statut terminee"

# Verifier que le port 8000 est en ecoute
sleep 5
if netstat -tuln | grep :8000; then
    echo "Port 8000 en ecoute - Service operationnel"
else
    echo "Port 8000 non accessible - Probleme de demarrage"
fi
"""
    
    script_path = backend_path / "restart_service.sh"
    with open(script_path, 'w') as f:
        f.write(restart_script)
    
    # Rendre le script ex√©cutable
    os.chmod(script_path, 0o755)
    logger.info(f"üìù Script de red√©marrage cr√©√©: {script_path}")
    
    # 4. Afficher les instructions de d√©ploiement
    logger.info("\n" + "="*60)
    logger.info("üìã INSTRUCTIONS DE D√âPLOIEMENT MANUEL")
    logger.info("="*60)
    logger.info("1. Connectez-vous au serveur de production")
    logger.info("2. Naviguez vers le r√©pertoire du projet")
    logger.info("3. Ex√©cutez les commandes suivantes:")
    logger.info("")
    logger.info("   # Sauvegarder les fichiers modifi√©s")
    logger.info("   git add core/views_savings.py core/views_dashboard.py")
    logger.info("   git commit -m 'Fix: Remplacer slash par points dans formatage montants'")
    logger.info("   git push")
    logger.info("")
    logger.info("   # Sur le serveur de production:")
    logger.info("   git pull")
    logger.info("   python manage.py collectstatic --noinput")
    logger.info("   ./restart_service.sh")
    logger.info("")
    logger.info("4. V√©rifiez que le service fonctionne:")
    logger.info("   curl -k https://api.xamila.finance/health/")
    logger.info("")
    logger.info("5. Testez le PDF Ma Caisse pour v√©rifier le formatage")
    logger.info("="*60)
    
    return True

def main():
    """Fonction principale"""
    logger.info("üéØ Script de d√©ploiement des corrections de formatage")
    
    if deploy_backend_fixes():
        logger.info("‚úÖ D√©ploiement pr√©par√© avec succ√®s")
        logger.info("üì§ Pr√™t pour le d√©ploiement sur le serveur de production")
        return 0
    else:
        logger.error("‚ùå √âchec de la pr√©paration du d√©ploiement")
        return 1

if __name__ == "__main__":
    sys.exit(main())
