"""
Django settings for xamila project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,api.xamila.finance,xamila.finance,www.xamila.finance', cast=lambda v: [s.strip() for s in v.split(',')])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    'drf_spectacular',
    
    # Local apps
    'core',
]

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'core.authentication.EmailOrPhoneBackend',
    'django.contrib.auth.backends.ModelBackend',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add request logging middleware
class RequestLoggingMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        print(f"REQUEST: {request.method} {request.path}")
        print(f"HEADERS: {dict(request.headers)}")
        if request.method == 'POST':
            print(f"BODY: {request.body}")
        response = self.get_response(request)
        print(f"RESPONSE: {response.status_code}")
        return response

MIDDLEWARE.insert(0, 'xamila.settings.RequestLoggingMiddleware')

ROOT_URLCONF = 'xamila.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'xamila.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME', default='xamila'),
        #'USER': config('DB_USER', default='root'),
        #'PASSWORD': config('DB_PASSWORD', default='root'),
        'USER': config('DB_USER', default='xamila'),
        'PASSWORD': config('DB_PASSWORD', default='xamil@IFE2025'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ================================
# SECURITY CONFIGURATION FOR PRODUCTION
# ================================

# Security settings for HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False
USE_TLS = True

# Security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# CSRF settings
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True

# Trusted origins for CSRF
CSRF_TRUSTED_ORIGINS = [
    'https://xamila.finance',
    'https://www.xamila.finance',
    'https://api.xamila.finance',
]

# ================================
# EMAIL CONFIGURATION
# ================================

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@xamila.com'
EMAIL_HOST = 'localhost'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

# ================================
# AUTHENTICATION CONFIGURATION
# ================================

# Utiliser notre mod√®le User personnalis√©
AUTH_USER_MODEL = 'core.User'

# Ajouter le backend d'authentification personnalis√©
AUTHENTICATION_BACKENDS = [
    'core.authentication.EmailOrPhoneBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# ================================
# REST FRAMEWORK CONFIGURATION
# ================================

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# ================================
# JWT CONFIGURATION
# ================================

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'core.models.User',
    
    'JTI_CLAIM': 'jti',
}

# ================================
# SWAGGER/OPENAPI CONFIGURATION
# ================================

SPECTACULAR_SETTINGS = {
    'TITLE': 'Xamila Fintech Platform API',
    'DESCRIPTION': '''API compl√®te de la plateforme fintech Xamila

## Fonctionnalit√©s principales

### üîê Authentification et KYC
- Inscription et connexion s√©curis√©es multi-r√¥les
- V√©rification OTP (email + SMS)
- Gestion compl√®te du profil KYC
- Upload et validation de documents

### üè¶ Gestion SGI (Soci√©t√©s de Gestion d'Investissement)
- Enregistrement et validation des SGI
- Gestion des managers SGI
- Matching intelligent clients-SGI
- Suivi des performances et analytics

### üí∞ Challenge √âpargne
- D√©fis d'√©pargne gamifi√©s
- Objectifs personnalis√©s et suivi de progression
- Syst√®me de points et r√©compenses
- Classements et leaderboards
- Comptes d'√©pargne virtuels

### üìö E-Learning et Formation
- Parcours d'apprentissage structur√©s
- Modules interactifs et quiz avanc√©s
- Syst√®me de certification
- Suivi de progression et analytics
- Gestion des instructeurs

### üîÑ Trading et Investissement
- Gestion de portefeuilles
- Ordres et positions de trading
- Suivi des transactions
- Analytics de performance
- Gestion des risques

### üìß Syst√®me de Notifications
- Templates et campagnes personnalisables
- Notifications multi-canal (email, SMS, push, in-app)
- Pr√©f√©rences utilisateur granulaires
- Analytics et m√©triques de performance
- Webhooks et int√©grations

### üìä Fonctionnalit√©s avanc√©es
- Syst√®me de matching bas√© sur les crit√®res
- Reporting et business intelligence
- Gestion des contrats et signatures √©lectroniques
- S√©curit√© et conformit√© r√©glementaire

## Authentification

Cette API utilise JWT (JSON Web Tokens) pour l'authentification.

### R√¥les utilisateur
- **CUSTOMER** : Client final (d√©faut)
- **STUDENT** : Apprenant formations
- **SGI_MANAGER** : Gestionnaire SGI
- **INSTRUCTOR** : Formateur
- **SUPPORT** : Support client
- **ADMIN** : Administrateur

### Workflow d'authentification
1. **Inscription** : `POST /api/{role}/auth/register/` (customer, student, sgi_manager, etc.)
2. **V√©rification OTP** : `POST /api/{role}/auth/verify-otp/`
3. **Connexion** : `POST /api/{role}/auth/login/`
4. **Utilisation** : Inclure le token dans l'en-t√™te : `Authorization: Bearer <token>`
5. **Rafra√Æchissement** : `POST /api/auth/token/refresh/`

## Codes de statut

- `200` : Succ√®s
- `201` : Cr√©√© avec succ√®s
- `400` : Erreur de validation
- `401` : Non authentifi√©
- `403` : Non autoris√© (permissions insuffisantes)
- `404` : Ressource non trouv√©e
- `409` : Conflit (ressource d√©j√† existante)
- `429` : Trop de requ√™tes
- `500` : Erreur serveur interne
    ''',
    'VERSION': '2.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'CONTACT': {
        'name': '√âquipe Xamila',
        'email': 'api@xamila.com',
        'url': 'https://xamila.com/support'
    },
    'LICENSE': {
        'name': 'Propri√©taire Xamila',
        'url': 'https://xamila.com/license'
    },
    'TAGS': [
        {
            'name': 'Authentication',
            'description': 'Endpoints d\'authentification multi-r√¥les (inscription, connexion, OTP, tokens)'
        },
        {
            'name': 'KYC',
            'description': 'Gestion du profil KYC, documents et v√©rifications'
        },
        {
            'name': 'SGI',
            'description': 'Gestion des Soci√©t√©s de Gestion d\'Investissement et matching '
        },
        {
            'name': 'Savings Challenge',
            'description': 'D√©fis d\'√©pargne gamifi√©s, objectifs et comptes virtuels'
        },
        {
            'name': 'Learning',
            'description': 'E-learning, parcours de formation, quiz et certifications'
        },
        {
            'name': 'Trading',
            'description': 'Gestion de portefeuilles, ordres et analytics de trading'
        },
        {
            'name': 'Notifications',
            'description': 'Syst√®me de notifications multi-canal et campagnes'
        },
        {
            'name': 'Analytics',
            'description': 'Reporting, statistiques et business intelligence'
        },
        {
            'name': 'Admin',
            'description': 'Endpoints d\'administration et gestion syst√®me'
        },
    ],
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': False,
    'ENABLE_DJANGO_DEPLOY_CHECK': False,
    'DISABLE_ERRORS_AND_WARNINGS': True,
}

# ================================
# CORS CONFIGURATION
# ================================

# Autoriser les requ√™tes depuis le frontend React
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://xamila.finance",
    "https://www.xamila.finance",
    "https://api.xamila.finance",
]

# Autoriser les credentials (cookies, tokens)
CORS_ALLOW_CREDENTIALS = True

# Headers autoris√©s
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# M√©thodes HTTP autoris√©es
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Pour le d√©veloppement uniquement - autoriser toutes les origines
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True

# ================================
# LOGGING CONFIGURATION
# ================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'django_debug.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'core': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'core.views_auth': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
