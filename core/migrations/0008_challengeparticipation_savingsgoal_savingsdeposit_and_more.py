# Generated by Django 4.2.7 on 2025-08-22 19:06

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0007_auto_20250822_1116'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChallengeParticipation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('ACTIVE', 'Actif'), ('COMPLETED', 'Terminé'), ('FAILED', 'Échoué'), ('WITHDRAWN', 'Retiré')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('personal_target', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('100'))], verbose_name='Objectif personnel (FCFA)')),
                ('total_saved', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Total épargné (FCFA)')),
                ('deposits_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de dépôts')),
                ('current_streak', models.PositiveIntegerField(default=0, verbose_name='Série actuelle')),
                ('longest_streak', models.PositiveIntegerField(default=0, verbose_name='Plus longue série')),
                ('points_earned', models.PositiveIntegerField(default=0, verbose_name='Points gagnés')),
                ('bonus_earned', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Bonus gagné (FCFA)')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_deposit_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Participation au défi',
                'verbose_name_plural': 'Participations aux défis',
                'ordering': ['-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='SavingsGoal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name="Titre de l'objectif")),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('goal_type', models.CharField(choices=[('EMERGENCY_FUND', "Fonds d'urgence"), ('VACATION', 'Vacances'), ('EDUCATION', 'Éducation'), ('HOUSE', 'Achat immobilier'), ('CAR', 'Achat véhicule'), ('WEDDING', 'Mariage'), ('RETIREMENT', 'Retraite'), ('INVESTMENT', 'Investissement'), ('OTHER', 'Autre')], max_length=20, verbose_name="Type d'objectif")),
                ('target_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('1000'))], verbose_name='Montant objectif (FCFA)')),
                ('current_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Montant actuel (FCFA)')),
                ('target_date', models.DateField(blank=True, null=True, verbose_name='Date objectif')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('COMPLETED', 'Terminé'), ('PAUSED', 'En pause'), ('CANCELLED', 'Annulé')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='savings_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Objectif d'épargne",
                'verbose_name_plural': "Objectifs d'épargne",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavingsDeposit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('50'))], verbose_name='Montant (FCFA)')),
                ('deposit_method', models.CharField(choices=[('MOBILE_MONEY', 'Mobile Money'), ('BANK_TRANSFER', 'Virement bancaire'), ('CARD', 'Carte bancaire'), ('CASH', 'Espèces'), ('AUTOMATIC', 'Prélèvement automatique')], max_length=20, verbose_name='Méthode de dépôt')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('CONFIRMED', 'Confirmé'), ('FAILED', 'Échec'), ('REFUNDED', 'Remboursé')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('transaction_reference', models.CharField(blank=True, max_length=100, verbose_name='Référence de transaction')),
                ('points_awarded', models.PositiveIntegerField(default=0, verbose_name='Points attribués')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de traitement')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('participation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to='core.challengeparticipation')),
            ],
            options={
                'verbose_name': "Dépôt d'épargne",
                'verbose_name_plural': "Dépôts d'épargne",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavingsChallenge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Titre du défi')),
                ('description', models.TextField(verbose_name='Description')),
                ('short_description', models.CharField(max_length=500, verbose_name='Description courte')),
                ('challenge_type', models.CharField(choices=[('DAILY', 'Défi quotidien'), ('WEEKLY', 'Défi hebdomadaire'), ('MONTHLY', 'Défi mensuel'), ('QUARTERLY', 'Défi trimestriel'), ('SEMIANNUAL', 'Défi semestriel'), ('YEARLY', 'Défi annuel'), ('CUSTOM', 'Défi personnalisé')], max_length=20, verbose_name='Type de défi')),
                ('category', models.CharField(choices=[('BEGINNER', 'Débutant'), ('INTERMEDIATE', 'Intermédiaire'), ('ADVANCED', 'Avancé'), ('EXPERT', 'Expert'), ('SPECIAL', 'Spécial')], max_length=20, verbose_name='Catégorie')),
                ('target_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('100'))], verbose_name='Montant objectif (FCFA)')),
                ('minimum_deposit', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('50'))], verbose_name='Dépôt minimum (FCFA)')),
                ('duration_days', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Durée en jours')),
                ('reward_points', models.PositiveIntegerField(default=0, verbose_name='Points de récompense')),
                ('reward_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Bonus de récompense (%)')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Nombre maximum de participants')),
                ('is_public', models.BooleanField(default=True, verbose_name='Défi public')),
                ('status', models.CharField(choices=[('DRAFT', 'Brouillon'), ('ACTIVE', 'Actif'), ('PAUSED', 'En pause'), ('COMPLETED', 'Terminé'), ('CANCELLED', 'Annulé')], default='DRAFT', max_length=20, verbose_name='Statut')),
                ('start_date', models.DateField(verbose_name='Date de début')),
                ('end_date', models.DateField(verbose_name='Date de fin')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Défi d'épargne",
                'verbose_name_plural': "Défis d'épargne",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavingsAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('account_number', models.CharField(max_length=20, unique=True, verbose_name='Numéro de compte')),
                ('account_name', models.CharField(max_length=200, verbose_name='Nom du compte')),
                ('account_type', models.CharField(choices=[('BASIC', 'Compte de base'), ('PREMIUM', 'Compte premium'), ('CHALLENGE', 'Compte défi'), ('GOAL', 'Compte objectif')], max_length=20, verbose_name='Type de compte')),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Solde (FCFA)')),
                ('interest_rate', models.DecimalField(decimal_places=2, default=Decimal('2.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('20'))], verbose_name="Taux d'intérêt annuel (%)")),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('INACTIVE', 'Inactif'), ('FROZEN', 'Gelé'), ('CLOSED', 'Fermé')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('goal', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='savings_account', to='core.savingsgoal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='savings_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Compte d'épargne",
                'verbose_name_plural': "Comptes d'épargne",
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='challengeparticipation',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='core.savingschallenge'),
        ),
        migrations.AddField(
            model_name='challengeparticipation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='challengeparticipation',
            unique_together={('user', 'challenge')},
        ),
        migrations.CreateModel(
            name='ChallengeLeaderboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rank', models.PositiveIntegerField(verbose_name='Rang')),
                ('score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Score')),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='core.savingschallenge')),
                ('participation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='core.challengeparticipation')),
            ],
            options={
                'verbose_name': 'Classement défi',
                'verbose_name_plural': 'Classements défis',
                'ordering': ['challenge', 'rank'],
                'unique_together': {('challenge', 'participation')},
            },
        ),
    ]
