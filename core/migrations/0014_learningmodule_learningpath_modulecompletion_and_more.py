# Generated by Django 4.2.7 on 2025-08-25 22:59

import datetime
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0013_add_user_demographic_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='LearningModule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Titre du module')),
                ('description', models.TextField(verbose_name='Description')),
                ('module_type', models.CharField(choices=[('VIDEO', 'Vidéo'), ('QUIZ', 'Quiz'), ('READING', 'Lecture'), ('INTERACTIVE', 'Interactif'), ('ASSIGNMENT', 'Devoir')], max_length=20, verbose_name='Type de module')),
                ('content_url', models.URLField(blank=True, null=True, verbose_name='URL du contenu')),
                ('video_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID de la vidéo')),
                ('content_data', models.JSONField(blank=True, default=dict, verbose_name='Données du contenu')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordre dans le parcours')),
                ('estimated_duration', models.DurationField(blank=True, null=True, verbose_name='Durée estimée')),
                ('is_mandatory', models.BooleanField(default=True, verbose_name='Module obligatoire')),
                ('passing_score', models.DecimalField(decimal_places=2, default=Decimal('70.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score minimum requis (%)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Module actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Module d'apprentissage",
                'verbose_name_plural': "Modules d'apprentissage",
                'ordering': ['learning_path', 'order'],
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Titre du parcours')),
                ('description', models.TextField(verbose_name='Description')),
                ('path_type', models.CharField(choices=[('FINANCIAL_BASICS', 'Bases financières'), ('INVESTMENT_STRATEGY', "Stratégies d'investissement"), ('RISK_MANAGEMENT', 'Gestion des risques'), ('PORTFOLIO_MANAGEMENT', 'Gestion de portefeuille'), ('REGULATORY_COMPLIANCE', 'Conformité réglementaire')], max_length=30, verbose_name='Type de parcours')),
                ('difficulty_level', models.CharField(choices=[('BEGINNER', 'Débutant'), ('INTERMEDIATE', 'Intermédiaire'), ('ADVANCED', 'Avancé'), ('EXPERT', 'Expert')], max_length=20, verbose_name='Niveau de difficulté')),
                ('estimated_duration', models.DurationField(help_text='Temps estimé pour compléter le parcours', verbose_name='Durée estimée')),
                ('is_mandatory', models.BooleanField(default=False, verbose_name='Parcours obligatoire')),
                ('is_active', models.BooleanField(default=True, verbose_name='Parcours actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_learning_paths', to=settings.AUTH_USER_MODEL)),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='unlocks', to='core.learningpath', verbose_name='Prérequis')),
            ],
            options={
                'verbose_name': "Parcours d'apprentissage",
                'verbose_name_plural': "Parcours d'apprentissage",
                'ordering': ['difficulty_level', 'title'],
            },
        ),
        migrations.CreateModel(
            name='ModuleCompletion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Non commencé'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminé'), ('PASSED', 'Réussi'), ('FAILED', 'Échoué')], default='NOT_STARTED', max_length=20, verbose_name='Statut')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score (%)')),
                ('attempts_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de tentatives')),
                ('time_spent', models.DurationField(default=datetime.timedelta(0), verbose_name='Temps passé')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completions', to='core.learningmodule')),
            ],
            options={
                'verbose_name': 'Completion de module',
                'verbose_name_plural': 'Completions de modules',
                'ordering': ['student_progress', 'learning_module__order'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('category', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'core_permission',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom du portefeuille')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('portfolio_type', models.CharField(choices=[('PRACTICE', 'Entraînement'), ('COMPETITION', 'Compétition'), ('EDUCATION', 'Éducation'), ('SIMULATION', 'Simulation')], max_length=20, verbose_name='Type de portefeuille')),
                ('initial_capital', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Capital initial')),
                ('current_cash', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Liquidités actuelles')),
                ('total_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Valeur totale')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('INACTIVE', 'Inactif'), ('FROZEN', 'Gelé'), ('CLOSED', 'Fermé')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('allow_short_selling', models.BooleanField(default=False, verbose_name='Vente à découvert autorisée')),
                ('allow_margin_trading', models.BooleanField(default=False, verbose_name='Trading sur marge autorisé')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_rebalance', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolios', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Portefeuille',
                'verbose_name_plural': 'Portefeuilles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockExtended',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_index=True, max_length=10, unique=True, verbose_name='Symbole')),
                ('company_name', models.CharField(max_length=200, verbose_name="Nom de l'entreprise")),
                ('sector', models.CharField(max_length=100, verbose_name='Secteur')),
                ('industry', models.CharField(max_length=100, verbose_name='Industrie')),
                ('category', models.CharField(choices=[('BLUE_CHIP', 'Blue Chip'), ('GROWTH', 'Croissance'), ('VALUE', 'Valeur'), ('DIVIDEND', 'Dividende'), ('TECH', 'Technologie'), ('FINANCE', 'Finance'), ('HEALTHCARE', 'Santé'), ('ENERGY', 'Énergie'), ('CONSUMER', 'Consommation'), ('INDUSTRIAL', 'Industriel')], max_length=20, verbose_name='Catégorie')),
                ('market_cap', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Capitalisation boursière')),
                ('shares_outstanding', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Actions en circulation')),
                ('pe_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Ratio P/E')),
                ('dividend_yield', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Rendement dividende (%)')),
                ('beta', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Coefficient Beta')),
                ('current_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix actuel')),
                ('opening_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name="Prix d'ouverture")),
                ('high_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Plus haut')),
                ('low_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Plus bas')),
                ('previous_close', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Clôture précédente')),
                ('volume', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Volume')),
                ('average_volume', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Volume moyen')),
                ('market_status', models.CharField(choices=[('OPEN', 'Marché ouvert'), ('CLOSED', 'Marché fermé'), ('PRE_MARKET', 'Pré-marché'), ('AFTER_HOURS', 'Après bourse'), ('SUSPENDED', 'Suspendu')], default='CLOSED', max_length=20, verbose_name='Statut du marché')),
                ('is_tradeable', models.BooleanField(default=True, verbose_name='Négociable')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_price_update', models.DateTimeField(auto_now=True)),
                ('base_stock', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extended_stock', to='core.stock')),
            ],
            options={
                'verbose_name': 'Action étendue',
                'verbose_name_plural': 'Actions étendues',
                'ordering': ['symbol'],
            },
        ),
        migrations.CreateModel(
            name='TradingOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_type', models.CharField(choices=[('MARKET', 'Ordre au marché'), ('LIMIT', 'Ordre à cours limité'), ('STOP', 'Ordre stop'), ('STOP_LIMIT', 'Ordre stop-limit')], max_length=20, verbose_name="Type d'ordre")),
                ('side', models.CharField(choices=[('BUY', 'Achat'), ('SELL', 'Vente')], max_length=10, verbose_name='Sens')),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Quantité')),
                ('limit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix limite')),
                ('stop_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix stop')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('PARTIAL', 'Partiellement exécuté'), ('FILLED', 'Exécuté'), ('CANCELLED', 'Annulé'), ('REJECTED', 'Rejeté'), ('EXPIRED', 'Expiré')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('filled_quantity', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, verbose_name='Quantité exécutée')),
                ('average_fill_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name="Prix moyen d'exécution")),
                ('time_in_force', models.CharField(choices=[('DAY', 'Jour'), ('GTC', "Jusqu'à annulation"), ('IOC', 'Immédiat ou annulé'), ('FOK', 'Tout ou rien')], default='DAY', max_length=10, verbose_name='Durée de validité')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('filled_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.portfolio')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.stockextended')),
            ],
            options={
                'verbose_name': 'Ordre de trading',
                'verbose_name_plural': 'Ordres de trading',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('BUY', 'Achat'), ('SELL', 'Vente'), ('DIVIDEND', 'Dividende'), ('SPLIT', "Division d'actions"), ('DEPOSIT', 'Dépôt'), ('WITHDRAWAL', 'Retrait')], max_length=20, verbose_name='Type de transaction')),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Quantité')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix')),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Montant total')),
                ('commission', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Commission')),
                ('fees', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Frais')),
                ('executed_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='core.tradingorder')),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='core.portfolio')),
                ('stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='core.stockextended')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-executed_at'],
            },
        ),
        migrations.CreateModel(
            name='TradingCompetition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom de la compétition')),
                ('description', models.TextField(verbose_name='Description')),
                ('initial_capital', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Capital initial')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Nombre maximum de participants')),
                ('registration_start', models.DateTimeField(verbose_name='Début des inscriptions')),
                ('registration_end', models.DateTimeField(verbose_name='Fin des inscriptions')),
                ('start_date', models.DateTimeField(verbose_name='Date de début')),
                ('end_date', models.DateTimeField(verbose_name='Date de fin')),
                ('status', models.CharField(choices=[('UPCOMING', 'À venir'), ('ACTIVE', 'En cours'), ('ENDED', 'Terminée'), ('CANCELLED', 'Annulée')], default='UPCOMING', max_length=20, verbose_name='Statut')),
                ('prizes', models.JSONField(blank=True, default=list, verbose_name='Prix et récompenses')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_competitions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Compétition de trading',
                'verbose_name_plural': 'Compétitions de trading',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Non commencé'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminé'), ('PASSED', 'Réussi'), ('FAILED', 'Échoué'), ('EXPIRED', 'Expiré')], default='NOT_STARTED', max_length=20, verbose_name='Statut')),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Pourcentage de completion (%)')),
                ('overall_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score global (%)')),
                ('total_time_spent', models.DurationField(default=datetime.timedelta(0), verbose_name='Temps total passé')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='core.learningpath')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progrès étudiant',
                'verbose_name_plural': 'Progrès étudiants',
                'ordering': ['-last_activity_at'],
                'unique_together': {('student', 'learning_path')},
            },
        ),
        migrations.CreateModel(
            name='SGIAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('CONTRACT_PENDING', 'Contrat en attente'), ('CLIENT_INACTIVE', 'Client inactif'), ('PERFORMANCE_LOW', 'Performance faible'), ('COMPLIANCE_ISSUE', 'Problème de conformité'), ('SYSTEM_UPDATE', 'Mise à jour système'), ('MARKET_NEWS', 'Actualité marché')], max_length=30, verbose_name="Type d'alerte")),
                ('priority', models.CharField(choices=[('LOW', 'Faible'), ('MEDIUM', 'Moyenne'), ('HIGH', 'Élevée'), ('CRITICAL', 'Critique')], default='MEDIUM', max_length=20, verbose_name='Priorité')),
                ('status', models.CharField(choices=[('UNREAD', 'Non lu'), ('READ', 'Lu'), ('ACKNOWLEDGED', 'Accusé réception'), ('RESOLVED', 'Résolu'), ('DISMISSED', 'Ignoré')], default='UNREAD', max_length=20, verbose_name='Statut')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('action_required', models.BooleanField(default=False, verbose_name='Action requise')),
                ('action_url', models.URLField(blank=True, null=True, verbose_name="URL d'action")),
                ('related_object_type', models.CharField(blank=True, max_length=50, null=True, verbose_name="Type d'objet lié")),
                ('related_object_id', models.UUIDField(blank=True, null=True, verbose_name='ID objet lié')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expire le')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='Accusé réception le')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sgi_alerts', to=settings.AUTH_USER_MODEL)),
                ('sgi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='core.sgi')),
            ],
            options={
                'verbose_name': 'Alerte SGI',
                'verbose_name_plural': 'Alertes SGI',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizExtended',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quiz_type', models.CharField(choices=[('ASSESSMENT', 'Évaluation'), ('PRACTICE', 'Entraînement'), ('CERTIFICATION', 'Certification'), ('DIAGNOSTIC', 'Diagnostic')], default='ASSESSMENT', max_length=20, verbose_name='Type de quiz')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='Limite de temps')),
                ('show_timer', models.BooleanField(default=True, verbose_name='Afficher le chronomètre')),
                ('max_attempts', models.PositiveIntegerField(default=3, verbose_name='Nombre maximum de tentatives')),
                ('cooldown_period', models.DurationField(default=datetime.timedelta(days=1), verbose_name="Période d'attente entre tentatives")),
                ('randomize_questions', models.BooleanField(default=True, verbose_name='Mélanger les questions')),
                ('randomize_answers', models.BooleanField(default=True, verbose_name='Mélanger les réponses')),
                ('show_results_immediately', models.BooleanField(default=False, verbose_name='Afficher les résultats immédiatement')),
                ('show_correct_answers', models.BooleanField(default=True, verbose_name='Afficher les bonnes réponses')),
                ('allow_review', models.BooleanField(default=True, verbose_name='Permettre la révision')),
                ('weighted_scoring', models.BooleanField(default=False, verbose_name='Notation pondérée')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_module', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_extended', to='core.learningmodule')),
            ],
            options={
                'verbose_name': 'Quiz étendu',
                'verbose_name_plural': 'Quiz étendus',
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('STARTED', 'Commencé'), ('IN_PROGRESS', 'En cours'), ('SUBMITTED', 'Soumis'), ('GRADED', 'Noté'), ('ABANDONED', 'Abandonné'), ('EXPIRED', 'Expiré')], default='STARTED', max_length=20, verbose_name='Statut')),
                ('answers', models.JSONField(default=dict, verbose_name='Réponses')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score (%)')),
                ('total_points', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Points totaux')),
                ('earned_points', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Points obtenus')),
                ('total_questions', models.PositiveIntegerField(default=0, verbose_name='Nombre total de questions')),
                ('correct_answers', models.PositiveIntegerField(default=0, verbose_name='Réponses correctes')),
                ('time_spent', models.DurationField(blank=True, null=True, verbose_name='Temps passé')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('module_completion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to='core.modulecompletion')),
            ],
            options={
                'verbose_name': 'Tentative de quiz',
                'verbose_name_plural': 'Tentatives de quiz',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionExtended',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField(verbose_name='Texte de la question')),
                ('question_type', models.CharField(choices=[('MULTIPLE_CHOICE', 'Choix multiple'), ('SINGLE_CHOICE', 'Choix unique'), ('TRUE_FALSE', 'Vrai/Faux'), ('TEXT_INPUT', 'Saisie de texte'), ('NUMERIC', 'Numérique'), ('MATCHING', 'Appariement'), ('ORDERING', 'Classement'), ('FILL_BLANKS', 'Texte à trous')], max_length=20, verbose_name='Type de question')),
                ('difficulty_level', models.CharField(choices=[('EASY', 'Facile'), ('MEDIUM', 'Moyen'), ('HARD', 'Difficile'), ('EXPERT', 'Expert')], default='MEDIUM', max_length=10, verbose_name='Niveau de difficulté')),
                ('options', models.JSONField(default=list, verbose_name='Options de réponse')),
                ('correct_answers', models.JSONField(verbose_name='Réponses correctes')),
                ('explanation', models.TextField(blank=True, verbose_name='Explication')),
                ('hint', models.TextField(blank=True, verbose_name='Indice')),
                ('points', models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Points')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='Limite de temps pour cette question')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('image', models.ImageField(blank=True, null=True, upload_to='quiz_images/', verbose_name='Image')),
                ('audio', models.FileField(blank=True, null=True, upload_to='quiz_audio/', verbose_name='Audio')),
                ('is_active', models.BooleanField(default=True, verbose_name='Question active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_questions_extended', to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.quizextended')),
            ],
            options={
                'verbose_name': 'Question étendue',
                'verbose_name_plural': 'Questions étendues',
                'ordering': ['quiz', 'order'],
            },
        ),
        migrations.AddField(
            model_name='modulecompletion',
            name='student_progress',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='module_completions', to='core.studentprogress'),
        ),
        migrations.AddField(
            model_name='learningmodule',
            name='learning_path',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='core.learningpath'),
        ),
        migrations.CreateModel(
            name='SGIPerformanceMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period_type', models.CharField(choices=[('DAILY', 'Quotidien'), ('WEEKLY', 'Hebdomadaire'), ('MONTHLY', 'Mensuel'), ('QUARTERLY', 'Trimestriel'), ('YEARLY', 'Annuel')], max_length=20, verbose_name='Type de période')),
                ('period_start', models.DateTimeField(verbose_name='Début de période')),
                ('period_end', models.DateTimeField(verbose_name='Fin de période')),
                ('new_clients', models.PositiveIntegerField(default=0, verbose_name='Nouveaux clients')),
                ('active_clients', models.PositiveIntegerField(default=0, verbose_name='Clients actifs')),
                ('churned_clients', models.PositiveIntegerField(default=0, verbose_name='Clients perdus')),
                ('total_investments', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, verbose_name='Total investissements (FCFA)')),
                ('average_investment', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Investissement moyen (FCFA)')),
                ('total_fees_collected', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Total frais collectés (FCFA)')),
                ('portfolio_return', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('-100')), django.core.validators.MaxValueValidator(Decimal('1000'))], verbose_name='Rendement portefeuille (%)')),
                ('benchmark_return', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('-100')), django.core.validators.MaxValueValidator(Decimal('1000'))], verbose_name='Rendement benchmark (%)')),
                ('contracts_signed', models.PositiveIntegerField(default=0, verbose_name='Contrats signés')),
                ('contracts_pending', models.PositiveIntegerField(default=0, verbose_name='Contrats en attente')),
                ('contracts_rejected', models.PositiveIntegerField(default=0, verbose_name='Contrats rejetés')),
                ('client_satisfaction_score', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('10'))], verbose_name='Score satisfaction client (/10)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sgi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='core.sgi')),
            ],
            options={
                'verbose_name': 'Métrique de Performance SGI',
                'verbose_name_plural': 'Métriques de Performance SGI',
                'ordering': ['-period_start'],
                'unique_together': {('sgi', 'period_type', 'period_start')},
            },
        ),
        migrations.CreateModel(
            name='SGIManagerProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('manager_type', models.CharField(choices=[('GENERAL_MANAGER', 'Directeur Général'), ('PORTFOLIO_MANAGER', 'Gestionnaire de Portefeuille'), ('SALES_MANAGER', 'Manager Commercial'), ('COMPLIANCE_MANAGER', 'Manager Conformité'), ('OPERATIONS_MANAGER', 'Manager Opérations')], default='PORTFOLIO_MANAGER', max_length=30, verbose_name='Type de manager')),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='ID employé')),
                ('department', models.CharField(blank=True, max_length=100, null=True, verbose_name='Département')),
                ('hire_date', models.DateField(blank=True, null=True, verbose_name="Date d'embauche")),
                ('permission_level', models.CharField(choices=[('READ_ONLY', 'Lecture seule'), ('STANDARD', 'Standard'), ('ADVANCED', 'Avancé'), ('FULL_ACCESS', 'Accès complet')], default='STANDARD', max_length=20, verbose_name='Niveau de permission')),
                ('can_approve_contracts', models.BooleanField(default=False, verbose_name='Peut approuver les contrats')),
                ('can_manage_clients', models.BooleanField(default=True, verbose_name='Peut gérer les clients')),
                ('can_view_financials', models.BooleanField(default=False, verbose_name='Peut voir les données financières')),
                ('can_generate_reports', models.BooleanField(default=True, verbose_name='Peut générer des rapports')),
                ('max_contract_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Montant max de contrat approuvable (FCFA)')),
                ('max_daily_approvals', models.PositiveIntegerField(default=10, verbose_name="Nombre max d'approbations par jour")),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('sgi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managers', to='core.sgi')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sgi_manager_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Manager SGI',
                'verbose_name_plural': 'Profils Managers SGI',
                'unique_together': {('user', 'sgi')},
            },
        ),
        migrations.CreateModel(
            name='SGIClientRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relationship_type', models.CharField(choices=[('PRIMARY', 'Manager principal'), ('SECONDARY', 'Manager secondaire'), ('ADVISOR', 'Conseiller'), ('SUPPORT', 'Support')], default='PRIMARY', max_length=20, verbose_name='Type de relation')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('INACTIVE', 'Inactif'), ('SUSPENDED', 'Suspendu'), ('TERMINATED', 'Terminé')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de début')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de fin')),
                ('last_contact', models.DateTimeField(blank=True, null=True, verbose_name='Dernier contact')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sgi_managers', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_clients', to=settings.AUTH_USER_MODEL)),
                ('sgi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_relationships', to='core.sgi')),
            ],
            options={
                'verbose_name': 'Relation Client SGI',
                'verbose_name_plural': 'Relations Clients SGI',
                'unique_together': {('manager', 'client', 'sgi')},
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('CUSTOMER', 'Client'), ('SGI_MANAGER', 'Manager SGI'), ('INSTRUCTOR', 'Formateur'), ('SUPPORT', 'Support'), ('ADMIN', 'Administrateur'), ('STUDENT', 'Étudiant')], max_length=20)),
                ('is_granted', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.permission')),
            ],
            options={
                'db_table': 'core_role_permission',
                'ordering': ['role', 'permission__category', 'permission__name'],
                'unique_together': {('role', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True, verbose_name='Horodatage')),
                ('timeframe', models.CharField(choices=[('1MIN', '1 minute'), ('5MIN', '5 minutes'), ('15MIN', '15 minutes'), ('1HOUR', '1 heure'), ('1DAY', '1 jour'), ('1WEEK', '1 semaine'), ('1MONTH', '1 mois')], max_length=10, verbose_name='Période')),
                ('open_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name="Prix d'ouverture")),
                ('high_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Plus haut')),
                ('low_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Plus bas')),
                ('close_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix de clôture')),
                ('volume', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Volume')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='core.stockextended')),
            ],
            options={
                'verbose_name': 'Historique des prix',
                'verbose_name_plural': 'Historiques des prix',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['stock', 'timeframe', 'timestamp'], name='core_priceh_stock_i_86e2fc_idx'), models.Index(fields=['timestamp'], name='core_priceh_timesta_0e4fd1_idx')],
                'unique_together': {('stock', 'timestamp', 'timeframe')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='modulecompletion',
            unique_together={('student_progress', 'learning_module')},
        ),
        migrations.AlterUniqueTogether(
            name='learningmodule',
            unique_together={('learning_path', 'order')},
        ),
        migrations.CreateModel(
            name='Holding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Quantité')),
                ('average_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name="Prix moyen d'achat")),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Coût total')),
                ('current_value', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Valeur actuelle')),
                ('first_purchase_date', models.DateTimeField(verbose_name='Date du premier achat')),
                ('last_transaction_date', models.DateTimeField(verbose_name='Date de la dernière transaction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='core.portfolio')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='core.stockextended')),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
                'ordering': ['-current_value'],
                'unique_together': {('portfolio', 'stock')},
            },
        ),
        migrations.CreateModel(
            name='CompetitionParticipant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('REGISTERED', 'Inscrit'), ('ACTIVE', 'Actif'), ('DISQUALIFIED', 'Disqualifié'), ('WITHDRAWN', 'Retiré')], default='REGISTERED', max_length=20, verbose_name='Statut')),
                ('current_rank', models.PositiveIntegerField(blank=True, null=True, verbose_name='Classement actuel')),
                ('final_rank', models.PositiveIntegerField(blank=True, null=True, verbose_name='Classement final')),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='core.tradingcompetition')),
                ('portfolio', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='competition_participation', to='core.portfolio')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competition_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Participant à la compétition',
                'verbose_name_plural': 'Participants aux compétitions',
                'ordering': ['current_rank'],
                'unique_together': {('competition', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('certificate_number', models.CharField(max_length=50, unique=True, verbose_name='Numéro de certificat')),
                ('certification_type', models.CharField(choices=[('COMPLETION', 'Certificat de completion'), ('ACHIEVEMENT', 'Certificat de réussite'), ('MASTERY', 'Certificat de maîtrise'), ('PROFESSIONAL', 'Certification professionnelle')], max_length=20, verbose_name='Type de certification')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('EXPIRED', 'Expiré'), ('REVOKED', 'Révoqué'), ('SUSPENDED', 'Suspendu')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('final_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score final (%)')),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'expiration")),
                ('issued_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_certifications', to=settings.AUTH_USER_MODEL)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='core.learningpath')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Certification',
                'verbose_name_plural': 'Certifications',
                'ordering': ['-issued_at'],
                'unique_together': {('student', 'learning_path')},
            },
        ),
    ]
