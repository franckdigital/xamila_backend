# Generated by Django 4.2.7 on 2025-08-10 12:54

import core.models_kyc
from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClientInvestmentProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=200, verbose_name='Nom complet')),
                ('phone', models.CharField(max_length=20, verbose_name='Téléphone')),
                ('date_of_birth', models.DateField(verbose_name='Date de naissance')),
                ('profession', models.CharField(max_length=100, verbose_name='Profession')),
                ('monthly_income', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Revenus mensuels (FCFA)')),
                ('investment_objective', models.CharField(choices=[('GROWTH', 'Croissance'), ('INCOME', 'Revenus'), ('BALANCED', 'Équilibré'), ('CONSERVATIVE', 'Conservateur'), ('AGGRESSIVE', 'Agressif')], max_length=20, verbose_name="Objectif d'investissement")),
                ('risk_tolerance', models.CharField(choices=[('LOW', 'Faible'), ('MODERATE', 'Modéré'), ('HIGH', 'Élevé')], max_length=20, verbose_name='Tolérance au risque')),
                ('investment_horizon', models.CharField(choices=[('SHORT', 'Court terme (< 2 ans)'), ('MEDIUM', 'Moyen terme (2-5 ans)'), ('LONG', 'Long terme (> 5 ans)')], max_length=20, verbose_name="Horizon d'investissement")),
                ('investment_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('10000'))], verbose_name='Montant à investir (FCFA)')),
                ('investment_experience', models.CharField(choices=[('BEGINNER', 'Débutant'), ('INTERMEDIATE', 'Intermédiaire'), ('ADVANCED', 'Avancé'), ('EXPERT', 'Expert')], max_length=20, verbose_name="Expérience d'investissement")),
                ('preferred_sectors', models.JSONField(blank=True, default=list, help_text="Liste des secteurs d'activité préférés", verbose_name='Secteurs préférés')),
                ('exclude_sectors', models.JSONField(blank=True, default=list, help_text='Liste des secteurs à éviter', verbose_name='Secteurs à exclure')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_complete', models.BooleanField(default=False, verbose_name='Profil complet')),
            ],
            options={
                'verbose_name': "Profil d'investissement client",
                'verbose_name_plural': "Profils d'investissement clients",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClientSGIInteraction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('interaction_type', models.CharField(choices=[('VIEW', 'Consultation'), ('CONTACT', 'Prise de contact'), ('SELECTION', 'Sélection'), ('MEETING', 'Rendez-vous'), ('CONTRACT', 'Signature contrat')], max_length=20, verbose_name="Type d'interaction")),
                ('matching_score', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de compatibilité')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('status', models.CharField(choices=[('INITIATED', 'Initié'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminé'), ('CANCELLED', 'Annulé')], default='INITIATED', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sgi_interactions', to='core.clientinvestmentprofile')),
            ],
            options={
                'verbose_name': 'Interaction Client-SGI',
                'verbose_name_plural': 'Interactions Client-SGI',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KYCProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100, verbose_name='Prénom')),
                ('last_name', models.CharField(max_length=100, verbose_name='Nom de famille')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nom du milieu')),
                ('date_of_birth', models.DateField(verbose_name='Date de naissance')),
                ('place_of_birth', models.CharField(max_length=200, verbose_name='Lieu de naissance')),
                ('nationality', models.CharField(max_length=100, verbose_name='Nationalité')),
                ('gender', models.CharField(choices=[('M', 'Masculin'), ('F', 'Féminin'), ('O', 'Autre')], max_length=10, verbose_name='Genre')),
                ('address_line_1', models.CharField(max_length=200, verbose_name='Adresse ligne 1')),
                ('address_line_2', models.CharField(blank=True, max_length=200, null=True, verbose_name='Adresse ligne 2')),
                ('city', models.CharField(max_length=100, verbose_name='Ville')),
                ('state_province', models.CharField(max_length=100, verbose_name='État/Province')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Code postal')),
                ('country', models.CharField(max_length=100, verbose_name='Pays')),
                ('identity_document_type', models.CharField(choices=[('PASSPORT', 'Passeport'), ('NATIONAL_ID', "Carte d'identité nationale"), ('DRIVER_LICENSE', 'Permis de conduire'), ('RESIDENCE_PERMIT', 'Titre de séjour')], max_length=50, verbose_name="Type de document d'identité")),
                ('identity_document_number', models.CharField(max_length=50, verbose_name="Numéro du document d'identité")),
                ('identity_document_expiry', models.DateField(blank=True, null=True, verbose_name="Date d'expiration du document")),
                ('identity_document_issuing_country', models.CharField(max_length=100, verbose_name="Pays d'émission du document")),
                ('occupation', models.CharField(max_length=200, verbose_name='Profession')),
                ('employer_name', models.CharField(blank=True, max_length=200, null=True, verbose_name="Nom de l'employeur")),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='Revenus mensuels (FCFA)')),
                ('source_of_funds', models.CharField(choices=[('SALARY', 'Salaire'), ('BUSINESS', 'Activité commerciale'), ('INVESTMENT', 'Investissements'), ('INHERITANCE', 'Héritage'), ('GIFT', 'Don'), ('OTHER', 'Autre')], max_length=100, verbose_name='Source des fonds')),
                ('kyc_status', models.CharField(choices=[('PENDING', 'En attente'), ('UNDER_REVIEW', 'En cours de vérification'), ('APPROVED', 'Validé'), ('REJECTED', 'Rejeté'), ('EXPIRED', 'Expiré'), ('SUSPENDED', 'Suspendu')], default='PENDING', max_length=20, verbose_name='Statut KYC')),
                ('risk_level', models.CharField(choices=[('LOW', 'Faible'), ('MEDIUM', 'Moyen'), ('HIGH', 'Élevé'), ('VERY_HIGH', 'Très élevé')], default='LOW', max_length=20, verbose_name='Niveau de risque')),
                ('identity_verification_status', models.CharField(choices=[('NOT_SUBMITTED', 'Non soumis'), ('SUBMITTED', 'Soumis'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté')], default='NOT_SUBMITTED', max_length=20, verbose_name='Statut vérification identité')),
                ('address_verification_status', models.CharField(choices=[('NOT_SUBMITTED', 'Non soumis'), ('SUBMITTED', 'Soumis'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté')], default='NOT_SUBMITTED', max_length=20, verbose_name='Statut vérification adresse')),
                ('selfie_verification_status', models.CharField(choices=[('NOT_SUBMITTED', 'Non soumis'), ('SUBMITTED', 'Soumis'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté')], default='NOT_SUBMITTED', max_length=20, verbose_name='Statut vérification selfie')),
                ('verification_provider', models.CharField(blank=True, choices=[('SMILE_IDENTITY', 'Smile Identity'), ('ONFIDO', 'Onfido'), ('COMPLY_ADVANTAGE', 'ComplyAdvantage'), ('MANUAL', 'Vérification manuelle')], max_length=50, null=True, verbose_name='Fournisseur de vérification')),
                ('verification_reference', models.CharField(blank=True, max_length=200, null=True, verbose_name='Référence de vérification externe')),
                ('verification_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de vérification (%)')),
                ('submitted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de soumission')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de révision')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'approbation")),
                ('rejected_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de rejet')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'expiration")),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Motif de rejet')),
                ('rejection_details', models.JSONField(blank=True, default=dict, help_text='Détails techniques du rejet (erreurs API, etc.)', verbose_name='Détails du rejet')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_by', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['ADMIN', 'SUPPORT']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_kyc_profiles', to=settings.AUTH_USER_MODEL, verbose_name='Révisé par')),
                ('user', models.OneToOneField(limit_choices_to={'role': 'CUSTOMER'}, on_delete=django.db.models.deletion.CASCADE, related_name='kyc_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil KYC',
                'verbose_name_plural': 'Profils KYC',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SGI',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom de la SGI')),
                ('description', models.TextField(verbose_name='Description')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='sgi_logos/')),
                ('website', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, verbose_name='Email principal')),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(verbose_name='Adresse')),
                ('manager_name', models.CharField(max_length=100, verbose_name='Nom du manager')),
                ('manager_email', models.EmailField(max_length=254, verbose_name='Email du manager')),
                ('manager_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('supported_objectives', models.JSONField(default=list, help_text="Liste des objectifs d'investissement que cette SGI peut gérer", verbose_name="Objectifs d'investissement supportés")),
                ('supported_risk_levels', models.JSONField(default=list, help_text='Liste des niveaux de risque que cette SGI accepte', verbose_name='Niveaux de risque supportés')),
                ('supported_horizons', models.JSONField(default=list, help_text="Liste des horizons d'investissement proposés", verbose_name="Horizons d'investissement supportés")),
                ('min_investment_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name="Montant minimum d'investissement")),
                ('max_investment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name="Montant maximum d'investissement (optionnel)")),
                ('historical_performance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Performance annuelle moyenne sur les 3 dernières années', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('-100')), django.core.validators.MaxValueValidator(Decimal('1000'))], verbose_name='Performance historique (%)')),
                ('management_fees', models.DecimalField(decimal_places=2, default=Decimal('2.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('10'))], verbose_name='Frais de gestion (%)')),
                ('entry_fees', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('10'))], verbose_name="Frais d'entrée (%)")),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Vérifiée')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_clients', models.PositiveIntegerField(default=0, verbose_name='Nombre total de clients')),
                ('total_assets_under_management', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, verbose_name='Actifs sous gestion (FCFA)')),
            ],
            options={
                'verbose_name': 'SGI',
                'verbose_name_plural': 'SGI',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Numéro de téléphone invalide')])),
                ('role', models.CharField(choices=[('CUSTOMER', 'Client/Épargnant'), ('STUDENT', 'Étudiant/Apprenant'), ('SGI_MANAGER', 'Manager SGI'), ('INSTRUCTOR', 'Instructeur/Formateur'), ('SUPPORT', 'Support Client'), ('ADMIN', 'Administrateur')], default='CUSTOMER', max_length=20)),
                ('country_of_residence', models.CharField(blank=True, max_length=100, null=True)),
                ('country_of_origin', models.CharField(blank=True, max_length=100, null=True)),
                ('is_verified', models.BooleanField(default=False, verbose_name='Compte vérifié')),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='xamila_users', related_query_name='xamila_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='xamila_users', related_query_name='xamila_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_index=True, max_length=10, unique=True, verbose_name="Symbole de l'action")),
                ('company_name', models.CharField(max_length=200, verbose_name="Nom de l'entreprise")),
                ('current_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix actuel')),
                ('previous_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix précédent')),
                ('price_change', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Variation de prix')),
                ('price_change_percent', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Variation (%)')),
                ('volume', models.BigIntegerField(default=0, verbose_name="Volume d'échanges")),
                ('market_cap', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Capitalisation boursière')),
                ('is_active', models.BooleanField(default=True, verbose_name='Action active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Action/Stock',
                'verbose_name_plural': 'Actions/Stocks',
                'ordering': ['symbol'],
                'indexes': [models.Index(fields=['symbol', 'is_active'], name='core_stock_symbol_577bc2_idx'), models.Index(fields=['updated_at'], name='core_stock_updated_00faa4_idx')],
            },
        ),
        migrations.CreateModel(
            name='SGIMatchingRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('matched_sgis', models.JSONField(default=list, help_text='Liste des SGI avec leurs scores de compatibilité', verbose_name='SGI matchées')),
                ('total_matches', models.PositiveIntegerField(default=0, verbose_name='Nombre de matches')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('PROCESSING', 'En cours de traitement'), ('COMPLETED', 'Terminé'), ('FAILED', 'Échec')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('client_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matching_requests', to='core.clientinvestmentprofile')),
            ],
            options={
                'verbose_name': 'Demande de matching SGI',
                'verbose_name_plural': 'Demandes de matching SGI',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KYCVerificationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('PROFILE_CREATED', 'Profil créé'), ('DOCUMENT_UPLOADED', 'Document téléversé'), ('DOCUMENT_VERIFIED', 'Document vérifié'), ('DOCUMENT_REJECTED', 'Document rejeté'), ('PROFILE_SUBMITTED', 'Profil soumis pour révision'), ('PROFILE_APPROVED', 'Profil approuvé'), ('PROFILE_REJECTED', 'Profil rejeté'), ('AUTO_VERIFICATION', 'Vérification automatique'), ('MANUAL_REVIEW', 'Révision manuelle')], max_length=30, verbose_name="Type d'action")),
                ('description', models.TextField(verbose_name='Description')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('old_values', models.JSONField(blank=True, default=dict, verbose_name='Anciennes valeurs')),
                ('new_values', models.JSONField(blank=True, default=dict, verbose_name='Nouvelles valeurs')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('kyc_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_logs', to='core.kycprofile')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kyc_actions', to=settings.AUTH_USER_MODEL, verbose_name='Effectué par')),
            ],
            options={
                'verbose_name': 'Log de vérification KYC',
                'verbose_name_plural': 'Logs de vérification KYC',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('to_email', models.EmailField(max_length=254, verbose_name='Email destinataire')),
                ('from_email', models.EmailField(max_length=254, verbose_name='Email expéditeur')),
                ('subject', models.CharField(max_length=200, verbose_name='Sujet')),
                ('message', models.TextField(verbose_name='Message')),
                ('html_message', models.TextField(blank=True, verbose_name='Message HTML')),
                ('notification_type', models.CharField(choices=[('SGI_MANAGER', 'Notification manager SGI'), ('CLIENT_CONFIRMATION', 'Confirmation client'), ('XAMILA_NOTIFICATION', 'Notification équipe Xamila'), ('SYSTEM', 'Notification système')], max_length=30, verbose_name='Type de notification')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('SENT', 'Envoyé'), ('FAILED', 'Échec'), ('BOUNCED', 'Rejeté')], default='PENDING', max_length=20, verbose_name="Statut d'envoi")),
                ('error_message', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('client_interaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_notifications', to='core.clientsgiinteraction')),
            ],
            options={
                'verbose_name': 'Notification email',
                'verbose_name_plural': 'Notifications email',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='clientsgiinteraction',
            name='matching_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='core.sgimatchingrequest'),
        ),
        migrations.AddField(
            model_name='clientsgiinteraction',
            name='sgi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_interactions', to='core.sgi'),
        ),
        migrations.AddField(
            model_name='clientinvestmentprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='investment_profile', to='core.user'),
        ),
        migrations.CreateModel(
            name='AdminDashboardEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('priority', models.CharField(choices=[('LOW', 'Faible (< 1M FCFA)'), ('MEDIUM', 'Moyenne (1M - 10M FCFA)'), ('HIGH', 'Élevée (10M - 50M FCFA)'), ('CRITICAL', 'Critique (> 50M FCFA)')], max_length=20, verbose_name='Niveau de priorité')),
                ('follow_up_status', models.CharField(choices=[('NEW', 'Nouveau'), ('CONTACTED', 'Contacté'), ('IN_NEGOTIATION', 'En négociation'), ('CLOSED_WON', 'Conclu (gagné)'), ('CLOSED_LOST', 'Conclu (perdu)')], default='NEW', max_length=20, verbose_name='Statut de suivi')),
                ('admin_notes', models.TextField(blank=True, verbose_name='Notes administratives')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_dashboard_entries', to='core.user', verbose_name='Assigné à')),
                ('client_interaction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_entry', to='core.clientsgiinteraction')),
            ],
            options={
                'verbose_name': 'Entrée dashboard admin',
                'verbose_name_plural': 'Entrées dashboard admin',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=255, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('is_revoked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refresh_tokens', to='core.user')),
            ],
            options={
                'verbose_name': 'Token de rafraîchissement',
                'verbose_name_plural': 'Tokens de rafraîchissement',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_revoked'], name='core_refres_user_id_9471c4_idx')],
            },
        ),
        migrations.CreateModel(
            name='QuizSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('video_id', models.CharField(db_index=True, max_length=100)),
                ('answers', models.JSONField(default=dict, help_text='Dictionnaire question_id: réponse', verbose_name='Réponses utilisateur')),
                ('score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score (%)')),
                ('total_questions', models.PositiveIntegerField(verbose_name='Nombre total de questions')),
                ('correct_answers', models.PositiveIntegerField(verbose_name='Réponses correctes')),
                ('time_spent', models.DurationField(blank=True, null=True, verbose_name='Temps passé')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_submissions', to='core.user')),
            ],
            options={
                'verbose_name': 'Soumission de quiz',
                'verbose_name_plural': 'Soumissions de quiz',
                'ordering': ['-submitted_at'],
                'indexes': [models.Index(fields=['user', 'video_id'], name='core_quizsu_user_id_9461e0_idx'), models.Index(fields=['video_id', 'score'], name='core_quizsu_video_i_d78abb_idx')],
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('video_id', models.CharField(db_index=True, max_length=100, verbose_name='ID de la vidéo associée')),
                ('question_text', models.TextField(verbose_name='Texte de la question')),
                ('question_type', models.CharField(choices=[('MULTIPLE_CHOICE', 'Choix multiple'), ('TRUE_FALSE', 'Vrai/Faux'), ('SINGLE_CHOICE', 'Choix unique')], default='MULTIPLE_CHOICE', max_length=20)),
                ('options', models.JSONField(default=list, help_text='Liste des options possibles', verbose_name='Options de réponse')),
                ('correct_answer', models.JSONField(help_text='Index ou liste des bonnes réponses', verbose_name='Réponse(s) correcte(s)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('is_active', models.BooleanField(default=True, verbose_name='Question active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(limit_choices_to={'role__in': ['ADMIN', 'INSTRUCTOR']}, on_delete=django.db.models.deletion.CASCADE, related_name='created_questions', to='core.user')),
            ],
            options={
                'verbose_name': 'Question de quiz',
                'verbose_name_plural': 'Questions de quiz',
                'ordering': ['video_id', 'order'],
                'indexes': [models.Index(fields=['video_id', 'is_active'], name='core_quizqu_video_i_f2edc9_idx'), models.Index(fields=['video_id', 'order'], name='core_quizqu_video_i_3be0e8_idx')],
            },
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=6, verbose_name='Code OTP')),
                ('otp_type', models.CharField(choices=[('REGISTRATION', 'Inscription'), ('PASSWORD_RESET', 'Réinitialisation mot de passe'), ('EMAIL_VERIFICATION', 'Vérification email'), ('PHONE_VERIFICATION', 'Vérification téléphone')], max_length=20)),
                ('is_used', models.BooleanField(default=False)),
                ('is_expired', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otps', to='core.user')),
            ],
            options={
                'verbose_name': 'Code OTP',
                'verbose_name_plural': 'Codes OTP',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'otp_type', 'is_used'], name='core_otp_user_id_dd2adf_idx'), models.Index(fields=['code', 'expires_at'], name='core_otp_code_4df96f_idx')],
            },
        ),
        migrations.CreateModel(
            name='KYCDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('IDENTITY_FRONT', "Pièce d'identité (recto)"), ('IDENTITY_BACK', "Pièce d'identité (verso)"), ('SELFIE', 'Photo selfie'), ('PROOF_OF_ADDRESS', 'Justificatif de domicile'), ('BANK_STATEMENT', 'Relevé bancaire'), ('SALARY_SLIP', 'Fiche de paie'), ('OTHER', 'Autre document')], max_length=20, verbose_name='Type de document')),
                ('file', models.FileField(upload_to=core.models_kyc.kyc_document_upload_path, verbose_name='Fichier')),
                ('original_filename', models.CharField(max_length=255, verbose_name='Nom original du fichier')),
                ('file_size', models.PositiveIntegerField(verbose_name='Taille du fichier (bytes)')),
                ('mime_type', models.CharField(max_length=100, verbose_name='Type MIME')),
                ('verification_status', models.CharField(choices=[('PENDING', 'En attente'), ('PROCESSING', 'En cours de traitement'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté'), ('EXPIRED', 'Expiré')], default='PENDING', max_length=20, verbose_name='Statut de vérification')),
                ('auto_verification_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de vérification automatique (%)')),
                ('extracted_data', models.JSONField(blank=True, default=dict, help_text='Données extraites automatiquement du document (OCR, etc.)', verbose_name='Données extraites')),
                ('verification_details', models.JSONField(blank=True, default=dict, help_text='Détails techniques de la vérification (API response, etc.)', verbose_name='Détails de vérification')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Motif de rejet')),
                ('kyc_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.kycprofile')),
                ('verified_by', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['ADMIN', 'SUPPORT']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_documents', to=settings.AUTH_USER_MODEL, verbose_name='Vérifié par')),
            ],
            options={
                'verbose_name': 'Document KYC',
                'verbose_name_plural': 'Documents KYC',
                'ordering': ['-uploaded_at'],
                'unique_together': {('kyc_profile', 'document_type')},
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contract_number', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Numéro de contrat')),
                ('investment_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('1000'))], verbose_name="Montant d'investissement (FCFA)")),
                ('funding_source', models.CharField(choices=[('VISA', 'Carte Visa'), ('MOBILE_MONEY', 'Mobile Money'), ('BANK_TRANSFER', 'Virement bancaire'), ('CASH', 'Espèces'), ('OTHER', 'Autre')], max_length=20, verbose_name='Source de financement')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True)),
                ('account_number', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('APPROVED', 'Approuvé'), ('REJECTED', 'Rejeté'), ('CANCELLED', 'Annulé')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('customer_notes', models.TextField(blank=True, verbose_name='Notes du client')),
                ('manager_notes', models.TextField(blank=True, verbose_name='Notes du manager')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Raison du rejet')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejected_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['SGI_MANAGER', 'ADMIN']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_contracts', to='core.user')),
                ('customer', models.ForeignKey(limit_choices_to={'role': 'CUSTOMER'}, on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='core.user')),
                ('sgi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='core.sgi')),
            ],
            options={
                'verbose_name': "Contrat d'investissement",
                'verbose_name_plural': "Contrats d'investissement",
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['customer', 'status'], name='core_contra_custome_469837_idx'), models.Index(fields=['sgi', 'status'], name='core_contra_sgi_id_7c812f_idx'), models.Index(fields=['contract_number'], name='core_contra_contrac_fac21c_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='clientsgiinteraction',
            unique_together={('client_profile', 'sgi', 'interaction_type', 'created_at')},
        ),
    ]
