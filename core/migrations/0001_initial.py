# Generated by Django 4.2.7 on 2025-08-26 00:46

import core.models_kyc
import datetime
from decimal import Decimal
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text="Adresse email unique pour l'authentification", max_length=254, unique=True, verbose_name='Email address')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Numéro de téléphone invalide')])),
                ('role', models.CharField(choices=[('CUSTOMER', 'Client/Épargnant'), ('STUDENT', 'Étudiant/Apprenant'), ('SGI_MANAGER', 'Manager SGI'), ('INSTRUCTOR', 'Instructeur/Formateur'), ('SUPPORT', 'Support Client'), ('ADMIN', 'Administrateur')], default='CUSTOMER', max_length=20)),
                ('age_range', models.CharField(blank=True, choices=[('moins_de_18', 'Moins de 18 ans'), ('18_24', '18-24 ans'), ('25_35', '25-35 ans'), ('36_45', '36-45 ans'), ('46_55', '46-55 ans'), ('plus_de_55', 'Plus de 55 ans')], max_length=20, null=True, verbose_name="Tranche d'âge")),
                ('gender', models.CharField(blank=True, choices=[('masculin', 'Masculin'), ('feminin', 'Féminin')], max_length=10, null=True, verbose_name='Genre')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Pays de résidence')),
                ('country_of_residence', models.CharField(blank=True, max_length=100, null=True)),
                ('country_of_origin', models.CharField(blank=True, max_length=100, null=True)),
                ('is_verified', models.BooleanField(default=False, verbose_name='Compte vérifié')),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_verified', models.BooleanField(default=False)),
                ('monthly_savings_goal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name="Objectif d'épargne mensuel (FCFA)")),
                ('monthly_goal_set_date', models.DateTimeField(blank=True, null=True, verbose_name="Date de définition de l'objectif mensuel")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Actualites',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('titre', models.CharField(max_length=200, verbose_name="Titre de l'article")),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField(help_text="Résumé de l'article affiché dans les listes", max_length=500, verbose_name='Description courte')),
                ('contenu', models.TextField(verbose_name="Contenu complet de l'article")),
                ('image', models.ImageField(help_text="Image affichée en tête d'article et dans les listes", upload_to='actualites/', verbose_name='Image principale')),
                ('image_alt', models.CharField(blank=True, max_length=200, verbose_name="Texte alternatif de l'image")),
                ('tags', models.JSONField(blank=True, default=list, help_text="Liste des tags associés à l'article", verbose_name='Mots-clés')),
                ('date_publication', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de publication')),
                ('statut', models.CharField(choices=[('BROUILLON', 'Brouillon'), ('PUBLIE', 'Publié'), ('ARCHIVE', 'Archivé')], default='BROUILLON', max_length=10, verbose_name='Statut')),
                ('acces', models.CharField(choices=[('FREE', 'Gratuit'), ('PREMIUM', 'Premium')], default='FREE', max_length=10, verbose_name="Type d'accès")),
                ('meta_title', models.CharField(blank=True, help_text='Titre optimisé pour les moteurs de recherche', max_length=60, verbose_name='Titre SEO')),
                ('meta_description', models.CharField(blank=True, help_text='Description optimisée pour les moteurs de recherche', max_length=160, verbose_name='Description SEO')),
                ('nb_vues', models.PositiveIntegerField(default=0, verbose_name='Nombre de vues')),
                ('nb_partages', models.PositiveIntegerField(default=0, verbose_name='Nombre de partages')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Article à la une')),
                ('allow_comments', models.BooleanField(default=True, verbose_name='Autoriser les commentaires')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Article d'actualité",
                'verbose_name_plural': "Articles d'actualités",
                'ordering': ['-date_publication'],
            },
        ),
        migrations.CreateModel(
            name='AdminDashboardEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('priority', models.CharField(choices=[('LOW', 'Faible (< 1M FCFA)'), ('MEDIUM', 'Moyenne (1M - 10M FCFA)'), ('HIGH', 'Élevée (10M - 50M FCFA)'), ('CRITICAL', 'Critique (> 50M FCFA)')], max_length=20, verbose_name='Niveau de priorité')),
                ('follow_up_status', models.CharField(choices=[('NEW', 'Nouveau'), ('CONTACTED', 'Contacté'), ('IN_NEGOTIATION', 'En négociation'), ('CLOSED_WON', 'Conclu (gagné)'), ('CLOSED_LOST', 'Conclu (perdu)')], default='NEW', max_length=20, verbose_name='Statut de suivi')),
                ('admin_notes', models.TextField(blank=True, verbose_name='Notes administratives')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Entrée dashboard admin',
                'verbose_name_plural': 'Entrées dashboard admin',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Banniere',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=200, verbose_name='Nom de la bannière')),
                ('image', models.ImageField(upload_to='bannieres/', verbose_name='Image de la bannière')),
                ('lien', models.URLField(blank=True, null=True, verbose_name='Lien de redirection')),
                ('position', models.CharField(choices=[('HAUT', 'Haut de page'), ('BAS', 'Bas de page'), ('DROITE', 'Côté droit'), ('GAUCHE', 'Côté gauche')], max_length=10, verbose_name='Position sur la page')),
                ('largeur', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(2000)], verbose_name='Largeur (px)')),
                ('hauteur', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(1000)], verbose_name='Hauteur (px)')),
                ('annonceur', models.CharField(blank=True, max_length=200, verbose_name="Nom de l'annonceur")),
                ('prix', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Prix de la publicité')),
                ('date_debut', models.DateTimeField(verbose_name="Date de début d'affichage")),
                ('date_fin', models.DateTimeField(verbose_name="Date de fin d'affichage")),
                ('nb_impressions', models.PositiveIntegerField(default=0, verbose_name="Nombre d'impressions")),
                ('nb_clics', models.PositiveIntegerField(default=0, verbose_name='Nombre de clics')),
                ('is_active', models.BooleanField(default=True, verbose_name='Bannière active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Bannière publicitaire',
                'verbose_name_plural': 'Bannières publicitaires',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Categorie',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, unique=True, verbose_name='Nom de la catégorie')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/', verbose_name='Image de la catégorie')),
                ('ordre', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('is_active', models.BooleanField(default=True, verbose_name='Catégorie active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'ordering': ['ordre', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('certificate_number', models.CharField(max_length=50, unique=True, verbose_name='Numéro de certificat')),
                ('certification_type', models.CharField(choices=[('COMPLETION', 'Certificat de completion'), ('ACHIEVEMENT', 'Certificat de réussite'), ('MASTERY', 'Certificat de maîtrise'), ('PROFESSIONAL', 'Certification professionnelle')], max_length=20, verbose_name='Type de certification')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('EXPIRED', 'Expiré'), ('REVOKED', 'Révoqué'), ('SUSPENDED', 'Suspendu')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('final_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score final (%)')),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'expiration")),
            ],
            options={
                'verbose_name': 'Certification',
                'verbose_name_plural': 'Certifications',
                'ordering': ['-issued_at'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeLeaderboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rank', models.PositiveIntegerField(verbose_name='Rang')),
                ('score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Score')),
                ('calculated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Classement défi',
                'verbose_name_plural': 'Classements défis',
                'ordering': ['challenge', 'rank'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('ACTIVE', 'Actif'), ('COMPLETED', 'Terminé'), ('FAILED', 'Échoué'), ('WITHDRAWN', 'Retiré')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('personal_target', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('100'))], verbose_name='Objectif personnel (FCFA)')),
                ('total_saved', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Total épargné (FCFA)')),
                ('deposits_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de dépôts')),
                ('current_streak', models.PositiveIntegerField(default=0, verbose_name='Série actuelle')),
                ('longest_streak', models.PositiveIntegerField(default=0, verbose_name='Plus longue série')),
                ('points_earned', models.PositiveIntegerField(default=0, verbose_name='Points gagnés')),
                ('bonus_earned', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Bonus gagné (FCFA)')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_deposit_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Participation au défi',
                'verbose_name_plural': 'Participations aux défis',
                'ordering': ['-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='ClientInvestmentProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=200, verbose_name='Nom complet')),
                ('phone', models.CharField(max_length=20, verbose_name='Téléphone')),
                ('date_of_birth', models.DateField(verbose_name='Date de naissance')),
                ('profession', models.CharField(max_length=100, verbose_name='Profession')),
                ('monthly_income', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Revenus mensuels (FCFA)')),
                ('investment_objective', models.CharField(choices=[('GROWTH', 'Croissance'), ('INCOME', 'Revenus'), ('BALANCED', 'Équilibré'), ('CONSERVATIVE', 'Conservateur'), ('AGGRESSIVE', 'Agressif')], max_length=20, verbose_name="Objectif d'investissement")),
                ('risk_tolerance', models.CharField(choices=[('LOW', 'Faible'), ('MODERATE', 'Modéré'), ('HIGH', 'Élevé')], max_length=20, verbose_name='Tolérance au risque')),
                ('investment_horizon', models.CharField(choices=[('SHORT', 'Court terme (< 2 ans)'), ('MEDIUM', 'Moyen terme (2-5 ans)'), ('LONG', 'Long terme (> 5 ans)')], max_length=20, verbose_name="Horizon d'investissement")),
                ('investment_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('10000'))], verbose_name='Montant à investir (FCFA)')),
                ('investment_experience', models.CharField(choices=[('BEGINNER', 'Débutant'), ('INTERMEDIATE', 'Intermédiaire'), ('ADVANCED', 'Avancé'), ('EXPERT', 'Expert')], max_length=20, verbose_name="Expérience d'investissement")),
                ('preferred_sectors', models.JSONField(blank=True, default=list, help_text="Liste des secteurs d'activité préférés", verbose_name='Secteurs préférés')),
                ('exclude_sectors', models.JSONField(blank=True, default=list, help_text='Liste des secteurs à éviter', verbose_name='Secteurs à exclure')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_complete', models.BooleanField(default=False, verbose_name='Profil complet')),
            ],
            options={
                'verbose_name': "Profil d'investissement client",
                'verbose_name_plural': "Profils d'investissement clients",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClientSGIInteraction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('interaction_type', models.CharField(choices=[('VIEW', 'Consultation'), ('CONTACT', 'Prise de contact'), ('SELECTION', 'Sélection'), ('MEETING', 'Rendez-vous'), ('CONTRACT', 'Signature contrat')], max_length=20, verbose_name="Type d'interaction")),
                ('matching_score', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de compatibilité')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('status', models.CharField(choices=[('INITIATED', 'Initié'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminé'), ('CANCELLED', 'Annulé')], default='INITIATED', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Interaction Client-SGI',
                'verbose_name_plural': 'Interactions Client-SGI',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentaireArticle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contenu', models.TextField(verbose_name='Contenu du commentaire')),
                ('statut', models.CharField(choices=[('EN_ATTENTE', 'En attente de modération'), ('APPROUVE', 'Approuvé'), ('REJETE', 'Rejeté')], default='EN_ATTENTE', max_length=15, verbose_name='Statut')),
                ('raison_rejet', models.TextField(blank=True, verbose_name='Raison du rejet')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Commentaire d'article",
                'verbose_name_plural': "Commentaires d'articles",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionParticipant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('REGISTERED', 'Inscrit'), ('ACTIVE', 'Actif'), ('DISQUALIFIED', 'Disqualifié'), ('WITHDRAWN', 'Retiré')], default='REGISTERED', max_length=20, verbose_name='Statut')),
                ('current_rank', models.PositiveIntegerField(blank=True, null=True, verbose_name='Classement actuel')),
                ('final_rank', models.PositiveIntegerField(blank=True, null=True, verbose_name='Classement final')),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Participant à la compétition',
                'verbose_name_plural': 'Participants aux compétitions',
                'ordering': ['current_rank'],
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contract_number', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Numéro de contrat')),
                ('investment_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('1000'))], verbose_name="Montant d'investissement (FCFA)")),
                ('funding_source', models.CharField(choices=[('VISA', 'Carte Visa'), ('MOBILE_MONEY', 'Mobile Money'), ('BANK_TRANSFER', 'Virement bancaire'), ('CASH', 'Espèces'), ('OTHER', 'Autre')], max_length=20, verbose_name='Source de financement')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True)),
                ('account_number', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('APPROVED', 'Approuvé'), ('REJECTED', 'Rejeté'), ('CANCELLED', 'Annulé')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('customer_notes', models.TextField(blank=True, verbose_name='Notes du client')),
                ('manager_notes', models.TextField(blank=True, verbose_name='Notes du manager')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Raison du rejet')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejected_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': "Contrat d'investissement",
                'verbose_name_plural': "Contrats d'investissement",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('to_email', models.EmailField(max_length=254, verbose_name='Email destinataire')),
                ('from_email', models.EmailField(max_length=254, verbose_name='Email expéditeur')),
                ('subject', models.CharField(max_length=200, verbose_name='Sujet')),
                ('message', models.TextField(verbose_name='Message')),
                ('html_message', models.TextField(blank=True, verbose_name='Message HTML')),
                ('notification_type', models.CharField(choices=[('SGI_MANAGER', 'Notification manager SGI'), ('CLIENT_CONFIRMATION', 'Confirmation client'), ('XAMILA_NOTIFICATION', 'Notification équipe Xamila'), ('SYSTEM', 'Notification système')], max_length=30, verbose_name='Type de notification')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('SENT', 'Envoyé'), ('FAILED', 'Échec'), ('BOUNCED', 'Rejeté')], default='PENDING', max_length=20, verbose_name="Statut d'envoi")),
                ('error_message', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Notification email',
                'verbose_name_plural': 'Notifications email',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Holding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Quantité')),
                ('average_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name="Prix moyen d'achat")),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Coût total')),
                ('current_value', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Valeur actuelle')),
                ('first_purchase_date', models.DateTimeField(verbose_name='Date du premier achat')),
                ('last_transaction_date', models.DateTimeField(verbose_name='Date de la dernière transaction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
                'ordering': ['-current_value'],
            },
        ),
        migrations.CreateModel(
            name='KYCDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('IDENTITY_FRONT', "Pièce d'identité (recto)"), ('IDENTITY_BACK', "Pièce d'identité (verso)"), ('SELFIE', 'Photo selfie'), ('PROOF_OF_ADDRESS', 'Justificatif de domicile'), ('BANK_STATEMENT', 'Relevé bancaire'), ('SALARY_SLIP', 'Fiche de paie'), ('OTHER', 'Autre document')], max_length=20, verbose_name='Type de document')),
                ('file', models.FileField(upload_to=core.models_kyc.kyc_document_upload_path, verbose_name='Fichier')),
                ('original_filename', models.CharField(max_length=255, verbose_name='Nom original du fichier')),
                ('file_size', models.PositiveIntegerField(verbose_name='Taille du fichier (bytes)')),
                ('mime_type', models.CharField(max_length=100, verbose_name='Type MIME')),
                ('verification_status', models.CharField(choices=[('PENDING', 'En attente'), ('PROCESSING', 'En cours de traitement'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté'), ('EXPIRED', 'Expiré')], default='PENDING', max_length=20, verbose_name='Statut de vérification')),
                ('auto_verification_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de vérification automatique (%)')),
                ('extracted_data', models.JSONField(blank=True, default=dict, help_text='Données extraites automatiquement du document (OCR, etc.)', verbose_name='Données extraites')),
                ('verification_details', models.JSONField(blank=True, default=dict, help_text='Détails techniques de la vérification (API response, etc.)', verbose_name='Détails de vérification')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Motif de rejet')),
            ],
            options={
                'verbose_name': 'Document KYC',
                'verbose_name_plural': 'Documents KYC',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='KYCProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100, verbose_name='Prénom')),
                ('last_name', models.CharField(max_length=100, verbose_name='Nom de famille')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nom du milieu')),
                ('date_of_birth', models.DateField(verbose_name='Date de naissance')),
                ('place_of_birth', models.CharField(max_length=200, verbose_name='Lieu de naissance')),
                ('nationality', models.CharField(max_length=100, verbose_name='Nationalité')),
                ('gender', models.CharField(choices=[('M', 'Masculin'), ('F', 'Féminin'), ('O', 'Autre')], max_length=10, verbose_name='Genre')),
                ('address_line_1', models.CharField(max_length=200, verbose_name='Adresse ligne 1')),
                ('address_line_2', models.CharField(blank=True, max_length=200, null=True, verbose_name='Adresse ligne 2')),
                ('city', models.CharField(max_length=100, verbose_name='Ville')),
                ('state_province', models.CharField(max_length=100, verbose_name='État/Province')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Code postal')),
                ('country', models.CharField(max_length=100, verbose_name='Pays')),
                ('identity_document_type', models.CharField(choices=[('PASSPORT', 'Passeport'), ('NATIONAL_ID', "Carte d'identité nationale"), ('DRIVER_LICENSE', 'Permis de conduire'), ('RESIDENCE_PERMIT', 'Titre de séjour')], max_length=50, verbose_name="Type de document d'identité")),
                ('identity_document_number', models.CharField(max_length=50, verbose_name="Numéro du document d'identité")),
                ('identity_document_expiry', models.DateField(blank=True, null=True, verbose_name="Date d'expiration du document")),
                ('identity_document_issuing_country', models.CharField(max_length=100, verbose_name="Pays d'émission du document")),
                ('occupation', models.CharField(max_length=200, verbose_name='Profession')),
                ('employer_name', models.CharField(blank=True, max_length=200, null=True, verbose_name="Nom de l'employeur")),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='Revenus mensuels (FCFA)')),
                ('source_of_funds', models.CharField(choices=[('SALARY', 'Salaire'), ('BUSINESS', 'Activité commerciale'), ('INVESTMENT', 'Investissements'), ('INHERITANCE', 'Héritage'), ('GIFT', 'Don'), ('OTHER', 'Autre')], max_length=100, verbose_name='Source des fonds')),
                ('kyc_status', models.CharField(choices=[('PENDING', 'En attente'), ('UNDER_REVIEW', 'En cours de vérification'), ('APPROVED', 'Validé'), ('REJECTED', 'Rejeté'), ('EXPIRED', 'Expiré'), ('SUSPENDED', 'Suspendu')], default='PENDING', max_length=20, verbose_name='Statut KYC')),
                ('risk_level', models.CharField(choices=[('LOW', 'Faible'), ('MEDIUM', 'Moyen'), ('HIGH', 'Élevé'), ('VERY_HIGH', 'Très élevé')], default='LOW', max_length=20, verbose_name='Niveau de risque')),
                ('identity_verification_status', models.CharField(choices=[('NOT_SUBMITTED', 'Non soumis'), ('SUBMITTED', 'Soumis'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté')], default='NOT_SUBMITTED', max_length=20, verbose_name='Statut vérification identité')),
                ('address_verification_status', models.CharField(choices=[('NOT_SUBMITTED', 'Non soumis'), ('SUBMITTED', 'Soumis'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté')], default='NOT_SUBMITTED', max_length=20, verbose_name='Statut vérification adresse')),
                ('selfie_verification_status', models.CharField(choices=[('NOT_SUBMITTED', 'Non soumis'), ('SUBMITTED', 'Soumis'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté')], default='NOT_SUBMITTED', max_length=20, verbose_name='Statut vérification selfie')),
                ('verification_provider', models.CharField(blank=True, choices=[('SMILE_IDENTITY', 'Smile Identity'), ('ONFIDO', 'Onfido'), ('COMPLY_ADVANTAGE', 'ComplyAdvantage'), ('MANUAL', 'Vérification manuelle')], max_length=50, null=True, verbose_name='Fournisseur de vérification')),
                ('verification_reference', models.CharField(blank=True, max_length=200, null=True, verbose_name='Référence de vérification externe')),
                ('verification_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de vérification (%)')),
                ('submitted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de soumission')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de révision')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'approbation")),
                ('rejected_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de rejet')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'expiration")),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Motif de rejet')),
                ('rejection_details', models.JSONField(blank=True, default=dict, help_text='Détails techniques du rejet (erreurs API, etc.)', verbose_name='Détails du rejet')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Profil KYC',
                'verbose_name_plural': 'Profils KYC',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KYCVerificationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('PROFILE_CREATED', 'Profil créé'), ('DOCUMENT_UPLOADED', 'Document téléversé'), ('DOCUMENT_VERIFIED', 'Document vérifié'), ('DOCUMENT_REJECTED', 'Document rejeté'), ('PROFILE_SUBMITTED', 'Profil soumis pour révision'), ('PROFILE_APPROVED', 'Profil approuvé'), ('PROFILE_REJECTED', 'Profil rejeté'), ('AUTO_VERIFICATION', 'Vérification automatique'), ('MANUAL_REVIEW', 'Révision manuelle')], max_length=30, verbose_name="Type d'action")),
                ('description', models.TextField(verbose_name='Description')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('old_values', models.JSONField(blank=True, default=dict, verbose_name='Anciennes valeurs')),
                ('new_values', models.JSONField(blank=True, default=dict, verbose_name='Nouvelles valeurs')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Log de vérification KYC',
                'verbose_name_plural': 'Logs de vérification KYC',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningModule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Titre du module')),
                ('description', models.TextField(verbose_name='Description')),
                ('module_type', models.CharField(choices=[('VIDEO', 'Vidéo'), ('QUIZ', 'Quiz'), ('READING', 'Lecture'), ('INTERACTIVE', 'Interactif'), ('ASSIGNMENT', 'Devoir')], max_length=20, verbose_name='Type de module')),
                ('content_url', models.URLField(blank=True, null=True, verbose_name='URL du contenu')),
                ('video_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID de la vidéo')),
                ('content_data', models.JSONField(blank=True, default=dict, verbose_name='Données du contenu')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordre dans le parcours')),
                ('estimated_duration', models.DurationField(blank=True, null=True, verbose_name='Durée estimée')),
                ('is_mandatory', models.BooleanField(default=True, verbose_name='Module obligatoire')),
                ('passing_score', models.DecimalField(decimal_places=2, default=Decimal('70.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score minimum requis (%)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Module actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Module d'apprentissage",
                'verbose_name_plural': "Modules d'apprentissage",
                'ordering': ['learning_path', 'order'],
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Titre du parcours')),
                ('description', models.TextField(verbose_name='Description')),
                ('path_type', models.CharField(choices=[('FINANCIAL_BASICS', 'Bases financières'), ('INVESTMENT_STRATEGY', "Stratégies d'investissement"), ('RISK_MANAGEMENT', 'Gestion des risques'), ('PORTFOLIO_MANAGEMENT', 'Gestion de portefeuille'), ('REGULATORY_COMPLIANCE', 'Conformité réglementaire')], max_length=30, verbose_name='Type de parcours')),
                ('difficulty_level', models.CharField(choices=[('BEGINNER', 'Débutant'), ('INTERMEDIATE', 'Intermédiaire'), ('ADVANCED', 'Avancé'), ('EXPERT', 'Expert')], max_length=20, verbose_name='Niveau de difficulté')),
                ('estimated_duration', models.DurationField(help_text='Temps estimé pour compléter le parcours', verbose_name='Durée estimée')),
                ('is_mandatory', models.BooleanField(default=False, verbose_name='Parcours obligatoire')),
                ('is_active', models.BooleanField(default=True, verbose_name='Parcours actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Parcours d'apprentissage",
                'verbose_name_plural': "Parcours d'apprentissage",
                'ordering': ['difficulty_level', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LectureArticle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('temps_lecture', models.DurationField(blank=True, null=True, verbose_name='Temps passé à lire')),
                ('pourcentage_lu', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Pourcentage lu')),
                ('is_complete', models.BooleanField(default=False, verbose_name='Lecture terminée')),
                ('is_bookmarked', models.BooleanField(default=False, verbose_name='Article mis en favoris')),
                ('first_read_at', models.DateTimeField(auto_now_add=True)),
                ('last_read_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Lecture d'article",
                'verbose_name_plural': "Lectures d'articles",
                'ordering': ['-last_read_at'],
            },
        ),
        migrations.CreateModel(
            name='ModuleCompletion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Non commencé'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminé'), ('PASSED', 'Réussi'), ('FAILED', 'Échoué')], default='NOT_STARTED', max_length=20, verbose_name='Statut')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score (%)')),
                ('attempts_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de tentatives')),
                ('time_spent', models.DurationField(default=datetime.timedelta(0), verbose_name='Temps passé')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Completion de module',
                'verbose_name_plural': 'Completions de modules',
                'ordering': ['student_progress', 'learning_module__order'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('PUSH', 'Notification push'), ('IN_APP', 'Notification in-app'), ('WEBHOOK', 'Webhook')], max_length=20, verbose_name='Type de notification')),
                ('subject', models.CharField(max_length=500, verbose_name='Sujet')),
                ('message', models.TextField(verbose_name='Message')),
                ('html_content', models.TextField(blank=True, verbose_name='Contenu HTML')),
                ('data', models.JSONField(blank=True, default=dict, verbose_name='Données additionnelles')),
                ('priority', models.CharField(choices=[('LOW', 'Faible'), ('NORMAL', 'Normale'), ('HIGH', 'Élevée'), ('URGENT', 'Urgente')], default='NORMAL', max_length=10, verbose_name='Priorité')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('SENT', 'Envoyée'), ('DELIVERED', 'Livrée'), ('OPENED', 'Ouverte'), ('CLICKED', 'Cliquée'), ('FAILED', 'Échec'), ('BOUNCED', 'Rejetée'), ('SPAM', 'Spam')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('scheduled_at', models.DateTimeField(blank=True, null=True, verbose_name='Programmée pour')),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('retry_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de tentatives')),
                ('max_retries', models.PositiveIntegerField(default=3, verbose_name='Nombre maximum de tentatives')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationCampaign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom de la campagne')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('campaign_type', models.CharField(choices=[('ONE_TIME', 'Ponctuelle'), ('RECURRING', 'Récurrente'), ('TRIGGERED', 'Déclenchée'), ('DRIP', 'Séquentielle')], max_length=20, verbose_name='Type de campagne')),
                ('target_audience', models.CharField(choices=[('ALL_USERS', 'Tous les utilisateurs'), ('CUSTOMERS', 'Clients'), ('SGI_MANAGERS', 'Managers SGI'), ('INSTRUCTORS', 'Formateurs'), ('STUDENTS', 'Étudiants'), ('INACTIVE_USERS', 'Utilisateurs inactifs'), ('HIGH_VALUE', 'Clients à forte valeur'), ('CUSTOM', 'Audience personnalisée')], max_length=20, verbose_name='Audience cible')),
                ('custom_audience_filter', models.JSONField(blank=True, default=dict, verbose_name="Filtre d'audience personnalisée")),
                ('scheduled_at', models.DateTimeField(blank=True, null=True, verbose_name='Programmée pour')),
                ('recurring_pattern', models.JSONField(blank=True, default=dict, verbose_name='Modèle de récurrence')),
                ('status', models.CharField(choices=[('DRAFT', 'Brouillon'), ('SCHEDULED', 'Programmée'), ('ACTIVE', 'Active'), ('PAUSED', 'En pause'), ('COMPLETED', 'Terminée'), ('CANCELLED', 'Annulée')], default='DRAFT', max_length=20, verbose_name='Statut')),
                ('total_recipients', models.PositiveIntegerField(default=0, verbose_name='Nombre total de destinataires')),
                ('sent_count', models.PositiveIntegerField(default=0, verbose_name='Nombre envoyé')),
                ('delivered_count', models.PositiveIntegerField(default=0, verbose_name='Nombre livré')),
                ('opened_count', models.PositiveIntegerField(default=0, verbose_name='Nombre ouvert')),
                ('clicked_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de clics')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Campagne de notification',
                'verbose_name_plural': 'Campagnes de notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], max_length=20, verbose_name='Niveau de log')),
                ('message', models.TextField(verbose_name='Message')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Détails additionnels')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Log de notification',
                'verbose_name_plural': 'Logs de notifications',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('preferences', models.JSONField(default=dict, help_text='Structure: {channel: {category: boolean}}', verbose_name='Préférences de notification')),
                ('global_opt_out', models.BooleanField(default=False, verbose_name='Désabonnement global')),
                ('quiet_hours_start', models.TimeField(blank=True, null=True, verbose_name='Début des heures de silence')),
                ('quiet_hours_end', models.TimeField(blank=True, null=True, verbose_name='Fin des heures de silence')),
                ('digest_frequency', models.CharField(choices=[('IMMEDIATE', 'Immédiat'), ('HOURLY', 'Horaire'), ('DAILY', 'Quotidien'), ('WEEKLY', 'Hebdomadaire')], default='IMMEDIATE', max_length=20, verbose_name='Fréquence de résumé')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Préférence de notification',
                'verbose_name_plural': 'Préférences de notifications',
            },
        ),
        migrations.CreateModel(
            name='NotificationQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('QUEUED', 'En file'), ('PROCESSING', 'En cours de traitement'), ('PROCESSED', 'Traité'), ('FAILED', 'Échec'), ('RETRYING', 'Nouvelle tentative')], default='QUEUED', max_length=20, verbose_name='Statut')),
                ('priority', models.PositiveIntegerField(default=100, help_text='Plus le nombre est faible, plus la priorité est élevée', verbose_name='Priorité')),
                ('attempts', models.PositiveIntegerField(default=0, verbose_name='Nombre de tentatives')),
                ('next_retry_at', models.DateTimeField(blank=True, null=True, verbose_name='Prochaine tentative')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'File de notification',
                'verbose_name_plural': 'Files de notifications',
                'ordering': ['priority', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom du template')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('template_type', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('PUSH', 'Notification push'), ('IN_APP', 'Notification in-app'), ('WEBHOOK', 'Webhook')], max_length=20, verbose_name='Type de template')),
                ('category', models.CharField(choices=[('SYSTEM', 'Système'), ('MARKETING', 'Marketing'), ('TRANSACTIONAL', 'Transactionnel'), ('EDUCATIONAL', 'Éducationnel'), ('SECURITY', 'Sécurité'), ('TRADING', 'Trading'), ('SGI', 'SGI')], max_length=20, verbose_name='Catégorie')),
                ('subject_template', models.CharField(blank=True, max_length=500, verbose_name='Template du sujet')),
                ('body_template', models.TextField(verbose_name='Template du corps')),
                ('html_template', models.TextField(blank=True, verbose_name='Template HTML')),
                ('available_variables', models.JSONField(blank=True, default=list, help_text='Liste des variables utilisables dans le template', verbose_name='Variables disponibles')),
                ('is_active', models.BooleanField(default=True, verbose_name='Template actif')),
                ('is_default', models.BooleanField(default=False, verbose_name='Template par défaut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Template de notification',
                'verbose_name_plural': 'Templates de notifications',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=6, verbose_name='Code OTP')),
                ('otp_type', models.CharField(choices=[('REGISTRATION', 'Inscription'), ('PASSWORD_RESET', 'Réinitialisation mot de passe'), ('EMAIL_VERIFICATION', 'Vérification email'), ('PHONE_VERIFICATION', 'Vérification téléphone')], max_length=20)),
                ('is_used', models.BooleanField(default=False)),
                ('is_expired', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Code OTP',
                'verbose_name_plural': 'Codes OTP',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('category', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'core_permission',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom du portefeuille')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('portfolio_type', models.CharField(choices=[('PRACTICE', 'Entraînement'), ('COMPETITION', 'Compétition'), ('EDUCATION', 'Éducation'), ('SIMULATION', 'Simulation')], max_length=20, verbose_name='Type de portefeuille')),
                ('initial_capital', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Capital initial')),
                ('current_cash', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Liquidités actuelles')),
                ('total_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Valeur totale')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('INACTIVE', 'Inactif'), ('FROZEN', 'Gelé'), ('CLOSED', 'Fermé')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('allow_short_selling', models.BooleanField(default=False, verbose_name='Vente à découvert autorisée')),
                ('allow_margin_trading', models.BooleanField(default=False, verbose_name='Trading sur marge autorisé')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_rebalance', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Portefeuille',
                'verbose_name_plural': 'Portefeuilles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True, verbose_name='Horodatage')),
                ('timeframe', models.CharField(choices=[('1MIN', '1 minute'), ('5MIN', '5 minutes'), ('15MIN', '15 minutes'), ('1HOUR', '1 heure'), ('1DAY', '1 jour'), ('1WEEK', '1 semaine'), ('1MONTH', '1 mois')], max_length=10, verbose_name='Période')),
                ('open_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name="Prix d'ouverture")),
                ('high_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Plus haut')),
                ('low_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Plus bas')),
                ('close_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix de clôture')),
                ('volume', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Volume')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Historique des prix',
                'verbose_name_plural': 'Historiques des prix',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='QuestionExtended',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField(verbose_name='Texte de la question')),
                ('question_type', models.CharField(choices=[('MULTIPLE_CHOICE', 'Choix multiple'), ('SINGLE_CHOICE', 'Choix unique'), ('TRUE_FALSE', 'Vrai/Faux'), ('TEXT_INPUT', 'Saisie de texte'), ('NUMERIC', 'Numérique'), ('MATCHING', 'Appariement'), ('ORDERING', 'Classement'), ('FILL_BLANKS', 'Texte à trous')], max_length=20, verbose_name='Type de question')),
                ('difficulty_level', models.CharField(choices=[('EASY', 'Facile'), ('MEDIUM', 'Moyen'), ('HARD', 'Difficile'), ('EXPERT', 'Expert')], default='MEDIUM', max_length=10, verbose_name='Niveau de difficulté')),
                ('options', models.JSONField(default=list, verbose_name='Options de réponse')),
                ('correct_answers', models.JSONField(verbose_name='Réponses correctes')),
                ('explanation', models.TextField(blank=True, verbose_name='Explication')),
                ('hint', models.TextField(blank=True, verbose_name='Indice')),
                ('points', models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Points')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='Limite de temps pour cette question')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('image', models.ImageField(blank=True, null=True, upload_to='quiz_images/', verbose_name='Image')),
                ('audio', models.FileField(blank=True, null=True, upload_to='quiz_audio/', verbose_name='Audio')),
                ('is_active', models.BooleanField(default=True, verbose_name='Question active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Question étendue',
                'verbose_name_plural': 'Questions étendues',
                'ordering': ['quiz', 'order'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('STARTED', 'Commencé'), ('IN_PROGRESS', 'En cours'), ('SUBMITTED', 'Soumis'), ('GRADED', 'Noté'), ('ABANDONED', 'Abandonné'), ('EXPIRED', 'Expiré')], default='STARTED', max_length=20, verbose_name='Statut')),
                ('answers', models.JSONField(default=dict, verbose_name='Réponses')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score (%)')),
                ('total_points', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Points totaux')),
                ('earned_points', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Points obtenus')),
                ('total_questions', models.PositiveIntegerField(default=0, verbose_name='Nombre total de questions')),
                ('correct_answers', models.PositiveIntegerField(default=0, verbose_name='Réponses correctes')),
                ('time_spent', models.DurationField(blank=True, null=True, verbose_name='Temps passé')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Tentative de quiz',
                'verbose_name_plural': 'Tentatives de quiz',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizExtended',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quiz_type', models.CharField(choices=[('ASSESSMENT', 'Évaluation'), ('PRACTICE', 'Entraînement'), ('CERTIFICATION', 'Certification'), ('DIAGNOSTIC', 'Diagnostic')], default='ASSESSMENT', max_length=20, verbose_name='Type de quiz')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='Limite de temps')),
                ('show_timer', models.BooleanField(default=True, verbose_name='Afficher le chronomètre')),
                ('max_attempts', models.PositiveIntegerField(default=3, verbose_name='Nombre maximum de tentatives')),
                ('cooldown_period', models.DurationField(default=datetime.timedelta(days=1), verbose_name="Période d'attente entre tentatives")),
                ('randomize_questions', models.BooleanField(default=True, verbose_name='Mélanger les questions')),
                ('randomize_answers', models.BooleanField(default=True, verbose_name='Mélanger les réponses')),
                ('show_results_immediately', models.BooleanField(default=False, verbose_name='Afficher les résultats immédiatement')),
                ('show_correct_answers', models.BooleanField(default=True, verbose_name='Afficher les bonnes réponses')),
                ('allow_review', models.BooleanField(default=True, verbose_name='Permettre la révision')),
                ('weighted_scoring', models.BooleanField(default=False, verbose_name='Notation pondérée')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Quiz étendu',
                'verbose_name_plural': 'Quiz étendus',
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('video_id', models.CharField(db_index=True, max_length=100, verbose_name='ID de la vidéo associée')),
                ('question_text', models.TextField(verbose_name='Texte de la question')),
                ('question_type', models.CharField(choices=[('MULTIPLE_CHOICE', 'Choix multiple'), ('TRUE_FALSE', 'Vrai/Faux'), ('SINGLE_CHOICE', 'Choix unique')], default='MULTIPLE_CHOICE', max_length=20)),
                ('options', models.JSONField(default=list, help_text='Liste des options possibles', verbose_name='Options de réponse')),
                ('correct_answer', models.JSONField(help_text='Index ou liste des bonnes réponses', verbose_name='Réponse(s) correcte(s)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('is_active', models.BooleanField(default=True, verbose_name='Question active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Question de quiz',
                'verbose_name_plural': 'Questions de quiz',
                'ordering': ['video_id', 'order'],
            },
        ),
        migrations.CreateModel(
            name='QuizSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('video_id', models.CharField(db_index=True, max_length=100)),
                ('answers', models.JSONField(default=dict, help_text='Dictionnaire question_id: réponse', verbose_name='Réponses utilisateur')),
                ('score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score (%)')),
                ('total_questions', models.PositiveIntegerField(verbose_name='Nombre total de questions')),
                ('correct_answers', models.PositiveIntegerField(verbose_name='Réponses correctes')),
                ('time_spent', models.DurationField(blank=True, null=True, verbose_name='Temps passé')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Soumission de quiz',
                'verbose_name_plural': 'Soumissions de quiz',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=255, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('is_revoked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Token de rafraîchissement',
                'verbose_name_plural': 'Tokens de rafraîchissement',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('CUSTOMER', 'Client'), ('SGI_MANAGER', 'Manager SGI'), ('INSTRUCTOR', 'Formateur'), ('SUPPORT', 'Support'), ('ADMIN', 'Administrateur'), ('STUDENT', 'Étudiant')], max_length=20)),
                ('is_granted', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'core_role_permission',
                'ordering': ['role', 'permission__category', 'permission__name'],
            },
        ),
        migrations.CreateModel(
            name='SavingsAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('account_number', models.CharField(max_length=20, unique=True, verbose_name='Numéro de compte')),
                ('account_name', models.CharField(max_length=200, verbose_name='Nom du compte')),
                ('account_type', models.CharField(choices=[('BASIC', 'Compte de base'), ('PREMIUM', 'Compte premium'), ('CHALLENGE', 'Compte défi'), ('GOAL', 'Compte objectif')], max_length=20, verbose_name='Type de compte')),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Solde (FCFA)')),
                ('interest_rate', models.DecimalField(decimal_places=2, default=Decimal('2.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('20'))], verbose_name="Taux d'intérêt annuel (%)")),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('INACTIVE', 'Inactif'), ('FROZEN', 'Gelé'), ('CLOSED', 'Fermé')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Compte d'épargne",
                'verbose_name_plural': "Comptes d'épargne",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavingsChallenge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Titre du défi')),
                ('description', models.TextField(verbose_name='Description')),
                ('short_description', models.CharField(max_length=500, verbose_name='Description courte')),
                ('challenge_type', models.CharField(choices=[('DAILY', 'Défi quotidien'), ('WEEKLY', 'Défi hebdomadaire'), ('MONTHLY', 'Défi mensuel'), ('QUARTERLY', 'Défi trimestriel'), ('SEMIANNUAL', 'Défi semestriel'), ('YEARLY', 'Défi annuel'), ('CUSTOM', 'Défi personnalisé')], max_length=20, verbose_name='Type de défi')),
                ('category', models.CharField(choices=[('BEGINNER', 'Débutant'), ('INTERMEDIATE', 'Intermédiaire'), ('ADVANCED', 'Avancé'), ('EXPERT', 'Expert'), ('SPECIAL', 'Spécial')], max_length=20, verbose_name='Catégorie')),
                ('target_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('100'))], verbose_name='Montant objectif (FCFA)')),
                ('minimum_deposit', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('50'))], verbose_name='Dépôt minimum (FCFA)')),
                ('duration_days', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Durée en jours')),
                ('reward_points', models.PositiveIntegerField(default=0, verbose_name='Points de récompense')),
                ('reward_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Bonus de récompense (%)')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Nombre maximum de participants')),
                ('is_public', models.BooleanField(default=True, verbose_name='Défi public')),
                ('status', models.CharField(choices=[('DRAFT', 'Brouillon'), ('ACTIVE', 'Actif'), ('PAUSED', 'En pause'), ('COMPLETED', 'Terminé'), ('CANCELLED', 'Annulé')], default='DRAFT', max_length=20, verbose_name='Statut')),
                ('start_date', models.DateField(verbose_name='Date de début')),
                ('end_date', models.DateField(verbose_name='Date de fin')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Défi d'épargne",
                'verbose_name_plural': "Défis d'épargne",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavingsDeposit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('50'))], verbose_name='Montant (FCFA)')),
                ('deposit_method', models.CharField(choices=[('MOBILE_MONEY', 'Mobile Money'), ('BANK_TRANSFER', 'Virement bancaire'), ('CARD', 'Carte bancaire'), ('CASH', 'Espèces'), ('AUTOMATIC', 'Prélèvement automatique')], max_length=20, verbose_name='Méthode de dépôt')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nom de la banque')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('CONFIRMED', 'Confirmé'), ('FAILED', 'Échec'), ('REFUNDED', 'Remboursé')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('transaction_reference', models.CharField(blank=True, max_length=100, verbose_name='Référence de transaction')),
                ('points_awarded', models.PositiveIntegerField(default=0, verbose_name='Points attribués')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de traitement')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Dépôt d'épargne",
                'verbose_name_plural': "Dépôts d'épargne",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavingsGoal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name="Titre de l'objectif")),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('goal_type', models.CharField(choices=[('EMERGENCY_FUND', "Fonds d'urgence"), ('VACATION', 'Vacances'), ('EDUCATION', 'Éducation'), ('HOUSE', 'Achat immobilier'), ('CAR', 'Achat véhicule'), ('WEDDING', 'Mariage'), ('RETIREMENT', 'Retraite'), ('INVESTMENT', 'Investissement'), ('OTHER', 'Autre')], max_length=20, verbose_name="Type d'objectif")),
                ('target_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('1000'))], verbose_name='Montant objectif (FCFA)')),
                ('current_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Montant actuel (FCFA)')),
                ('target_date', models.DateField(blank=True, null=True, verbose_name='Date objectif')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('COMPLETED', 'Terminé'), ('PAUSED', 'En pause'), ('CANCELLED', 'Annulé')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Objectif d'épargne",
                'verbose_name_plural': "Objectifs d'épargne",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SGI',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom de la SGI')),
                ('description', models.TextField(verbose_name='Description')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='sgi_logos/')),
                ('website', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, verbose_name='Email principal')),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(verbose_name='Adresse')),
                ('manager_name', models.CharField(max_length=100, verbose_name='Nom du manager')),
                ('manager_email', models.EmailField(max_length=254, verbose_name='Email du manager')),
                ('manager_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('min_investment_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name="Montant minimum d'investissement")),
                ('max_investment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name="Montant maximum d'investissement (optionnel)")),
                ('historical_performance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('-100')), django.core.validators.MaxValueValidator(Decimal('1000'))], verbose_name='Performance historique (%)')),
                ('management_fees', models.DecimalField(decimal_places=2, default=Decimal('2.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('10'))], verbose_name='Frais de gestion (%)')),
                ('entry_fees', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('10'))], verbose_name="Frais d'entrée (%)")),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Vérifiée')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'SGI',
                'verbose_name_plural': 'SGI',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SGIAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('CONTRACT_PENDING', 'Contrat en attente'), ('CLIENT_INACTIVE', 'Client inactif'), ('PERFORMANCE_LOW', 'Performance faible'), ('COMPLIANCE_ISSUE', 'Problème de conformité'), ('SYSTEM_UPDATE', 'Mise à jour système'), ('MARKET_NEWS', 'Actualité marché')], max_length=30, verbose_name="Type d'alerte")),
                ('priority', models.CharField(choices=[('LOW', 'Faible'), ('MEDIUM', 'Moyenne'), ('HIGH', 'Élevée'), ('CRITICAL', 'Critique')], default='MEDIUM', max_length=20, verbose_name='Priorité')),
                ('status', models.CharField(choices=[('UNREAD', 'Non lu'), ('READ', 'Lu'), ('ACKNOWLEDGED', 'Accusé réception'), ('RESOLVED', 'Résolu'), ('DISMISSED', 'Ignoré')], default='UNREAD', max_length=20, verbose_name='Statut')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('action_required', models.BooleanField(default=False, verbose_name='Action requise')),
                ('action_url', models.URLField(blank=True, null=True, verbose_name="URL d'action")),
                ('related_object_type', models.CharField(blank=True, max_length=50, null=True, verbose_name="Type d'objet lié")),
                ('related_object_id', models.UUIDField(blank=True, null=True, verbose_name='ID objet lié')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expire le')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='Accusé réception le')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Alerte SGI',
                'verbose_name_plural': 'Alertes SGI',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SGIClientRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relationship_type', models.CharField(choices=[('PRIMARY', 'Manager principal'), ('SECONDARY', 'Manager secondaire'), ('ADVISOR', 'Conseiller'), ('SUPPORT', 'Support')], default='PRIMARY', max_length=20, verbose_name='Type de relation')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('INACTIVE', 'Inactif'), ('SUSPENDED', 'Suspendu'), ('TERMINATED', 'Terminé')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de début')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de fin')),
                ('last_contact', models.DateTimeField(blank=True, null=True, verbose_name='Dernier contact')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Relation Client SGI',
                'verbose_name_plural': 'Relations Clients SGI',
            },
        ),
        migrations.CreateModel(
            name='SGIManagerProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('manager_type', models.CharField(choices=[('GENERAL_MANAGER', 'Directeur Général'), ('PORTFOLIO_MANAGER', 'Gestionnaire de Portefeuille'), ('SALES_MANAGER', 'Manager Commercial'), ('COMPLIANCE_MANAGER', 'Manager Conformité'), ('OPERATIONS_MANAGER', 'Manager Opérations')], default='PORTFOLIO_MANAGER', max_length=30, verbose_name='Type de manager')),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='ID employé')),
                ('department', models.CharField(blank=True, max_length=100, null=True, verbose_name='Département')),
                ('hire_date', models.DateField(blank=True, null=True, verbose_name="Date d'embauche")),
                ('permission_level', models.CharField(choices=[('READ_ONLY', 'Lecture seule'), ('STANDARD', 'Standard'), ('ADVANCED', 'Avancé'), ('FULL_ACCESS', 'Accès complet')], default='STANDARD', max_length=20, verbose_name='Niveau de permission')),
                ('can_approve_contracts', models.BooleanField(default=False, verbose_name='Peut approuver les contrats')),
                ('can_manage_clients', models.BooleanField(default=True, verbose_name='Peut gérer les clients')),
                ('can_view_financials', models.BooleanField(default=False, verbose_name='Peut voir les données financières')),
                ('can_generate_reports', models.BooleanField(default=True, verbose_name='Peut générer des rapports')),
                ('max_contract_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Montant max de contrat approuvable (FCFA)')),
                ('max_daily_approvals', models.PositiveIntegerField(default=10, verbose_name="Nombre max d'approbations par jour")),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Profil Manager SGI',
                'verbose_name_plural': 'Profils Managers SGI',
            },
        ),
        migrations.CreateModel(
            name='SGIMatchingRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('matched_sgis', models.JSONField(default=list, help_text='Liste des SGI avec leurs scores de compatibilité', verbose_name='SGI matchées')),
                ('total_matches', models.PositiveIntegerField(default=0, verbose_name='Nombre de matches')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('PROCESSING', 'En cours de traitement'), ('COMPLETED', 'Terminé'), ('FAILED', 'Échec')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Demande de matching SGI',
                'verbose_name_plural': 'Demandes de matching SGI',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SGIPerformanceMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period_type', models.CharField(choices=[('DAILY', 'Quotidien'), ('WEEKLY', 'Hebdomadaire'), ('MONTHLY', 'Mensuel'), ('QUARTERLY', 'Trimestriel'), ('YEARLY', 'Annuel')], max_length=20, verbose_name='Type de période')),
                ('period_start', models.DateTimeField(verbose_name='Début de période')),
                ('period_end', models.DateTimeField(verbose_name='Fin de période')),
                ('new_clients', models.PositiveIntegerField(default=0, verbose_name='Nouveaux clients')),
                ('active_clients', models.PositiveIntegerField(default=0, verbose_name='Clients actifs')),
                ('churned_clients', models.PositiveIntegerField(default=0, verbose_name='Clients perdus')),
                ('total_investments', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, verbose_name='Total investissements (FCFA)')),
                ('average_investment', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Investissement moyen (FCFA)')),
                ('total_fees_collected', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Total frais collectés (FCFA)')),
                ('portfolio_return', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('-100')), django.core.validators.MaxValueValidator(Decimal('1000'))], verbose_name='Rendement portefeuille (%)')),
                ('benchmark_return', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('-100')), django.core.validators.MaxValueValidator(Decimal('1000'))], verbose_name='Rendement benchmark (%)')),
                ('contracts_signed', models.PositiveIntegerField(default=0, verbose_name='Contrats signés')),
                ('contracts_pending', models.PositiveIntegerField(default=0, verbose_name='Contrats en attente')),
                ('contracts_rejected', models.PositiveIntegerField(default=0, verbose_name='Contrats rejetés')),
                ('client_satisfaction_score', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('10'))], verbose_name='Score satisfaction client (/10)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Métrique de Performance SGI',
                'verbose_name_plural': 'Métriques de Performance SGI',
                'ordering': ['-period_start'],
            },
        ),
        migrations.CreateModel(
            name='SousCategorie',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, verbose_name='Nom de la sous-catégorie')),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('ordre', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('is_active', models.BooleanField(default=True, verbose_name='Sous-catégorie active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Sous-catégorie',
                'verbose_name_plural': 'Sous-catégories',
                'ordering': ['categorie', 'ordre', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_index=True, max_length=10, unique=True, verbose_name="Symbole de l'action")),
                ('company_name', models.CharField(max_length=200, verbose_name="Nom de l'entreprise")),
                ('current_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix actuel')),
                ('previous_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix précédent')),
                ('price_change', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Variation de prix')),
                ('price_change_percent', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Variation (%)')),
                ('volume', models.BigIntegerField(default=0, verbose_name="Volume d'échanges")),
                ('market_cap', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Capitalisation boursière')),
                ('is_active', models.BooleanField(default=True, verbose_name='Action active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Action/Stock',
                'verbose_name_plural': 'Actions/Stocks',
                'ordering': ['symbol'],
            },
        ),
        migrations.CreateModel(
            name='StockExtended',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_index=True, max_length=10, unique=True, verbose_name='Symbole')),
                ('company_name', models.CharField(max_length=200, verbose_name="Nom de l'entreprise")),
                ('sector', models.CharField(max_length=100, verbose_name='Secteur')),
                ('industry', models.CharField(max_length=100, verbose_name='Industrie')),
                ('category', models.CharField(choices=[('BLUE_CHIP', 'Blue Chip'), ('GROWTH', 'Croissance'), ('VALUE', 'Valeur'), ('DIVIDEND', 'Dividende'), ('TECH', 'Technologie'), ('FINANCE', 'Finance'), ('HEALTHCARE', 'Santé'), ('ENERGY', 'Énergie'), ('CONSUMER', 'Consommation'), ('INDUSTRIAL', 'Industriel')], max_length=20, verbose_name='Catégorie')),
                ('market_cap', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Capitalisation boursière')),
                ('shares_outstanding', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Actions en circulation')),
                ('pe_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Ratio P/E')),
                ('dividend_yield', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Rendement dividende (%)')),
                ('beta', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Coefficient Beta')),
                ('current_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix actuel')),
                ('opening_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name="Prix d'ouverture")),
                ('high_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Plus haut')),
                ('low_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Plus bas')),
                ('previous_close', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Clôture précédente')),
                ('volume', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Volume')),
                ('average_volume', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Volume moyen')),
                ('market_status', models.CharField(choices=[('OPEN', 'Marché ouvert'), ('CLOSED', 'Marché fermé'), ('PRE_MARKET', 'Pré-marché'), ('AFTER_HOURS', 'Après bourse'), ('SUSPENDED', 'Suspendu')], default='CLOSED', max_length=20, verbose_name='Statut du marché')),
                ('is_tradeable', models.BooleanField(default=True, verbose_name='Négociable')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_price_update', models.DateTimeField(auto_now=True)),
                ('base_stock', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extended_stock', to='core.stock')),
            ],
            options={
                'verbose_name': 'Action étendue',
                'verbose_name_plural': 'Actions étendues',
                'ordering': ['symbol'],
            },
        ),
        migrations.CreateModel(
            name='TradingOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_type', models.CharField(choices=[('MARKET', 'Ordre au marché'), ('LIMIT', 'Ordre à cours limité'), ('STOP', 'Ordre stop'), ('STOP_LIMIT', 'Ordre stop-limit')], max_length=20, verbose_name="Type d'ordre")),
                ('side', models.CharField(choices=[('BUY', 'Achat'), ('SELL', 'Vente')], max_length=10, verbose_name='Sens')),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Quantité')),
                ('limit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix limite')),
                ('stop_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix stop')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('PARTIAL', 'Partiellement exécuté'), ('FILLED', 'Exécuté'), ('CANCELLED', 'Annulé'), ('REJECTED', 'Rejeté'), ('EXPIRED', 'Expiré')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('filled_quantity', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, verbose_name='Quantité exécutée')),
                ('average_fill_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name="Prix moyen d'exécution")),
                ('time_in_force', models.CharField(choices=[('DAY', 'Jour'), ('GTC', "Jusqu'à annulation"), ('IOC', 'Immédiat ou annulé'), ('FOK', 'Tout ou rien')], default='DAY', max_length=10, verbose_name='Durée de validité')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('filled_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.portfolio')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.stockextended')),
            ],
            options={
                'verbose_name': 'Ordre de trading',
                'verbose_name_plural': 'Ordres de trading',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WebhookEndpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom du webhook')),
                ('url', models.URLField(verbose_name='URL du webhook')),
                ('secret_key', models.CharField(blank=True, max_length=255, verbose_name='Clé secrète')),
                ('events', models.JSONField(default=list, verbose_name='Événements écoutés')),
                ('timeout', models.PositiveIntegerField(default=30, verbose_name='Timeout (secondes)')),
                ('max_retries', models.PositiveIntegerField(default=3, verbose_name='Nombre maximum de tentatives')),
                ('status', models.CharField(choices=[('ACTIVE', 'Actif'), ('INACTIVE', 'Inactif'), ('FAILED', 'En échec'), ('SUSPENDED', 'Suspendu')], default='ACTIVE', max_length=20, verbose_name='Statut')),
                ('total_calls', models.PositiveIntegerField(default=0, verbose_name="Nombre total d'appels")),
                ('successful_calls', models.PositiveIntegerField(default=0, verbose_name='Appels réussis')),
                ('failed_calls', models.PositiveIntegerField(default=0, verbose_name='Appels échoués')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_called_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_webhooks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Endpoint webhook',
                'verbose_name_plural': 'Endpoints webhook',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('BUY', 'Achat'), ('SELL', 'Vente'), ('DIVIDEND', 'Dividende'), ('SPLIT', "Division d'actions"), ('DEPOSIT', 'Dépôt'), ('WITHDRAWAL', 'Retrait')], max_length=20, verbose_name='Type de transaction')),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Quantité')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Prix')),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Montant total')),
                ('commission', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Commission')),
                ('fees', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Frais')),
                ('executed_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='core.tradingorder')),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='core.portfolio')),
                ('stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='core.stockextended')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-executed_at'],
            },
        ),
        migrations.CreateModel(
            name='TradingCompetition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom de la compétition')),
                ('description', models.TextField(verbose_name='Description')),
                ('initial_capital', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Capital initial')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Nombre maximum de participants')),
                ('registration_start', models.DateTimeField(verbose_name='Début des inscriptions')),
                ('registration_end', models.DateTimeField(verbose_name='Fin des inscriptions')),
                ('start_date', models.DateTimeField(verbose_name='Date de début')),
                ('end_date', models.DateTimeField(verbose_name='Date de fin')),
                ('status', models.CharField(choices=[('UPCOMING', 'À venir'), ('ACTIVE', 'En cours'), ('ENDED', 'Terminée'), ('CANCELLED', 'Annulée')], default='UPCOMING', max_length=20, verbose_name='Statut')),
                ('prizes', models.JSONField(blank=True, default=list, verbose_name='Prix et récompenses')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_competitions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Compétition de trading',
                'verbose_name_plural': 'Compétitions de trading',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Non commencé'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminé'), ('PASSED', 'Réussi'), ('FAILED', 'Échoué'), ('EXPIRED', 'Expiré')], default='NOT_STARTED', max_length=20, verbose_name='Statut')),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Pourcentage de completion (%)')),
                ('overall_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Score global (%)')),
                ('total_time_spent', models.DurationField(default=datetime.timedelta(0), verbose_name='Temps total passé')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='core.learningpath')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progrès étudiant',
                'verbose_name_plural': 'Progrès étudiants',
                'ordering': ['-last_activity_at'],
            },
        ),
        migrations.AddIndex(
            model_name='stock',
            index=models.Index(fields=['symbol', 'is_active'], name='core_stock_symbol_577bc2_idx'),
        ),
        migrations.AddIndex(
            model_name='stock',
            index=models.Index(fields=['updated_at'], name='core_stock_updated_00faa4_idx'),
        ),
        migrations.AddField(
            model_name='souscategorie',
            name='categorie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sous_categories', to='core.categorie'),
        ),
        migrations.AddField(
            model_name='sgiperformancemetrics',
            name='sgi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='core.sgi'),
        ),
        migrations.AddField(
            model_name='sgimatchingrequest',
            name='client_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matching_requests', to='core.clientinvestmentprofile'),
        ),
        migrations.AddField(
            model_name='sgimanagerprofile',
            name='sgi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managers', to='core.sgi'),
        ),
        migrations.AddField(
            model_name='sgimanagerprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sgi_manager_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sgiclientrelationship',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sgi_managers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sgiclientrelationship',
            name='manager',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_clients', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sgiclientrelationship',
            name='sgi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_relationships', to='core.sgi'),
        ),
        migrations.AddField(
            model_name='sgialert',
            name='manager',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sgi_alerts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sgialert',
            name='sgi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='core.sgi'),
        ),
        migrations.AddField(
            model_name='savingsgoal',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='savings_goals', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='savingsdeposit',
            name='participation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to='core.challengeparticipation'),
        ),
        migrations.AddField(
            model_name='savingschallenge',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='savingsaccount',
            name='goal',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='savings_account', to='core.savingsgoal'),
        ),
        migrations.AddField(
            model_name='savingsaccount',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='savings_accounts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='rolepermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.permission'),
        ),
        migrations.AddField(
            model_name='refreshtoken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refresh_tokens', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='quizsubmission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_submissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='quizquestion',
            name='created_by',
            field=models.ForeignKey(limit_choices_to={'role__in': ['ADMIN', 'INSTRUCTOR']}, on_delete=django.db.models.deletion.CASCADE, related_name='created_questions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='quizextended',
            name='learning_module',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_extended', to='core.learningmodule'),
        ),
        migrations.AddField(
            model_name='quizattempt',
            name='module_completion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to='core.modulecompletion'),
        ),
        migrations.AddField(
            model_name='questionextended',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_questions_extended', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='questionextended',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.quizextended'),
        ),
        migrations.AddField(
            model_name='pricehistory',
            name='stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='core.stockextended'),
        ),
        migrations.AddField(
            model_name='portfolio',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolios', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='otp',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otps', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notificationtemplate',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_notification_templates', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notificationqueue',
            name='notification',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='queue_entry', to='core.notification'),
        ),
        migrations.AddField(
            model_name='notificationpreference',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notificationlog',
            name='notification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='core.notification'),
        ),
        migrations.AddField(
            model_name='notificationcampaign',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_campaigns', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notificationcampaign',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='core.notificationtemplate'),
        ),
        migrations.AddField(
            model_name='notification',
            name='campaign',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='core.notificationcampaign'),
        ),
        migrations.AddField(
            model_name='notification',
            name='recipient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='modulecompletion',
            name='learning_module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completions', to='core.learningmodule'),
        ),
        migrations.AddField(
            model_name='modulecompletion',
            name='student_progress',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='module_completions', to='core.studentprogress'),
        ),
        migrations.AddField(
            model_name='lecturearticle',
            name='article',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='core.actualites'),
        ),
        migrations.AddField(
            model_name='lecturearticle',
            name='utilisateur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures_articles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='learningpath',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_learning_paths', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='learningpath',
            name='prerequisites',
            field=models.ManyToManyField(blank=True, related_name='unlocks', to='core.learningpath', verbose_name='Prérequis'),
        ),
        migrations.AddField(
            model_name='learningmodule',
            name='learning_path',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='core.learningpath'),
        ),
        migrations.AddField(
            model_name='kycverificationlog',
            name='kyc_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_logs', to='core.kycprofile'),
        ),
        migrations.AddField(
            model_name='kycverificationlog',
            name='performed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kyc_actions', to=settings.AUTH_USER_MODEL, verbose_name='Effectué par'),
        ),
        migrations.AddField(
            model_name='kycprofile',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_kyc_profiles', to=settings.AUTH_USER_MODEL, verbose_name='Révisé par'),
        ),
        migrations.AddField(
            model_name='kycprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='kyc_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='kycdocument',
            name='kyc_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.kycprofile'),
        ),
        migrations.AddField(
            model_name='kycdocument',
            name='verified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_documents', to=settings.AUTH_USER_MODEL, verbose_name='Vérifié par'),
        ),
        migrations.AddField(
            model_name='holding',
            name='portfolio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='core.portfolio'),
        ),
        migrations.AddField(
            model_name='holding',
            name='stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='core.stockextended'),
        ),
        migrations.AddField(
            model_name='emailnotification',
            name='client_interaction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_notifications', to='core.clientsgiinteraction'),
        ),
        migrations.AddField(
            model_name='contract',
            name='approved_by',
            field=models.ForeignKey(blank=True, limit_choices_to={'role__in': ['SGI_MANAGER', 'ADMIN']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_contracts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contract',
            name='customer',
            field=models.ForeignKey(limit_choices_to={'role': 'CUSTOMER'}, on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contract',
            name='sgi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='core.sgi'),
        ),
        migrations.AddField(
            model_name='competitionparticipant',
            name='competition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='core.tradingcompetition'),
        ),
        migrations.AddField(
            model_name='competitionparticipant',
            name='portfolio',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='competition_participation', to='core.portfolio'),
        ),
        migrations.AddField(
            model_name='competitionparticipant',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competition_participations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='commentairearticle',
            name='article',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentaires', to='core.actualites'),
        ),
        migrations.AddField(
            model_name='commentairearticle',
            name='auteur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentaires_articles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='commentairearticle',
            name='modere_par',
            field=models.ForeignKey(blank=True, limit_choices_to={'role__in': ['ADMIN', 'SUPPORT']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='commentaires_moderes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='commentairearticle',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reponses', to='core.commentairearticle'),
        ),
        migrations.AddField(
            model_name='clientsgiinteraction',
            name='client_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sgi_interactions', to='core.clientinvestmentprofile'),
        ),
        migrations.AddField(
            model_name='clientsgiinteraction',
            name='matching_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='core.sgimatchingrequest'),
        ),
        migrations.AddField(
            model_name='clientsgiinteraction',
            name='sgi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_interactions', to='core.sgi'),
        ),
        migrations.AddField(
            model_name='clientinvestmentprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='investment_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='challengeparticipation',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='core.savingschallenge'),
        ),
        migrations.AddField(
            model_name='challengeparticipation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='challengeleaderboard',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='core.savingschallenge'),
        ),
        migrations.AddField(
            model_name='challengeleaderboard',
            name='participation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='core.challengeparticipation'),
        ),
        migrations.AddField(
            model_name='certification',
            name='issued_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_certifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='certification',
            name='learning_path',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='core.learningpath'),
        ),
        migrations.AddField(
            model_name='certification',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='banniere',
            name='created_by',
            field=models.ForeignKey(limit_choices_to={'role__in': ['ADMIN', 'SUPPORT']}, on_delete=django.db.models.deletion.CASCADE, related_name='bannieres_creees', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='admindashboardentry',
            name='assigned_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_dashboard_entries', to=settings.AUTH_USER_MODEL, verbose_name='Assigné à'),
        ),
        migrations.AddField(
            model_name='admindashboardentry',
            name='client_interaction',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_entry', to='core.clientsgiinteraction'),
        ),
        migrations.AddField(
            model_name='actualites',
            name='auteur',
            field=models.ForeignKey(limit_choices_to={'role__in': ['ADMIN', 'INSTRUCTOR', 'SUPPORT']}, on_delete=django.db.models.deletion.CASCADE, related_name='articles_rediges', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actualites',
            name='banniere_bas',
            field=models.ForeignKey(blank=True, limit_choices_to={'position': 'BAS'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles_bas', to='core.banniere'),
        ),
        migrations.AddField(
            model_name='actualites',
            name='banniere_droite',
            field=models.ForeignKey(blank=True, limit_choices_to={'position': 'DROITE'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles_droite', to='core.banniere'),
        ),
        migrations.AddField(
            model_name='actualites',
            name='banniere_gauche',
            field=models.ForeignKey(blank=True, limit_choices_to={'position': 'GAUCHE'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles_gauche', to='core.banniere'),
        ),
        migrations.AddField(
            model_name='actualites',
            name='banniere_haut',
            field=models.ForeignKey(blank=True, limit_choices_to={'position': 'HAUT'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles_haut', to='core.banniere'),
        ),
        migrations.AddField(
            model_name='actualites',
            name='categorie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='core.categorie'),
        ),
        migrations.AddField(
            model_name='actualites',
            name='sous_categorie',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='core.souscategorie'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='xamila_users', related_query_name='xamila_user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='xamila_users', related_query_name='xamila_user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='studentprogress',
            unique_together={('student', 'learning_path')},
        ),
        migrations.AlterUniqueTogether(
            name='souscategorie',
            unique_together={('categorie', 'slug')},
        ),
        migrations.AlterUniqueTogether(
            name='sgiperformancemetrics',
            unique_together={('sgi', 'period_type', 'period_start')},
        ),
        migrations.AlterUniqueTogether(
            name='sgimanagerprofile',
            unique_together={('user', 'sgi')},
        ),
        migrations.AlterUniqueTogether(
            name='sgiclientrelationship',
            unique_together={('manager', 'client', 'sgi')},
        ),
        migrations.AlterUniqueTogether(
            name='rolepermission',
            unique_together={('role', 'permission')},
        ),
        migrations.AddIndex(
            model_name='refreshtoken',
            index=models.Index(fields=['user', 'is_revoked'], name='core_refres_user_id_9471c4_idx'),
        ),
        migrations.AddIndex(
            model_name='quizsubmission',
            index=models.Index(fields=['user', 'video_id'], name='core_quizsu_user_id_9461e0_idx'),
        ),
        migrations.AddIndex(
            model_name='quizsubmission',
            index=models.Index(fields=['video_id', 'score'], name='core_quizsu_video_i_d78abb_idx'),
        ),
        migrations.AddIndex(
            model_name='quizquestion',
            index=models.Index(fields=['video_id', 'is_active'], name='core_quizqu_video_i_f2edc9_idx'),
        ),
        migrations.AddIndex(
            model_name='quizquestion',
            index=models.Index(fields=['video_id', 'order'], name='core_quizqu_video_i_3be0e8_idx'),
        ),
        migrations.AddIndex(
            model_name='pricehistory',
            index=models.Index(fields=['stock', 'timeframe', 'timestamp'], name='core_priceh_stock_i_86e2fc_idx'),
        ),
        migrations.AddIndex(
            model_name='pricehistory',
            index=models.Index(fields=['timestamp'], name='core_priceh_timesta_0e4fd1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pricehistory',
            unique_together={('stock', 'timestamp', 'timeframe')},
        ),
        migrations.AddIndex(
            model_name='otp',
            index=models.Index(fields=['user', 'otp_type', 'is_used'], name='core_otp_user_id_dd2adf_idx'),
        ),
        migrations.AddIndex(
            model_name='otp',
            index=models.Index(fields=['code', 'expires_at'], name='core_otp_code_4df96f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationtemplate',
            unique_together={('template_type', 'category', 'is_default')},
        ),
        migrations.AddIndex(
            model_name='notificationqueue',
            index=models.Index(fields=['status', 'priority'], name='core_notifi_status_c22334_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationqueue',
            index=models.Index(fields=['next_retry_at'], name='core_notifi_next_re_4bbe84_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'status'], name='core_notifi_recipie_1989cb_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type', 'status'], name='core_notifi_notific_cfce42_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_at'], name='core_notifi_schedul_340655_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='modulecompletion',
            unique_together={('student_progress', 'learning_module')},
        ),
        migrations.AddIndex(
            model_name='lecturearticle',
            index=models.Index(fields=['utilisateur', 'is_bookmarked'], name='core_lectur_utilisa_212f03_idx'),
        ),
        migrations.AddIndex(
            model_name='lecturearticle',
            index=models.Index(fields=['article', 'is_complete'], name='core_lectur_article_093b02_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lecturearticle',
            unique_together={('utilisateur', 'article')},
        ),
        migrations.AlterUniqueTogether(
            name='learningmodule',
            unique_together={('learning_path', 'order')},
        ),
        migrations.AlterUniqueTogether(
            name='kycdocument',
            unique_together={('kyc_profile', 'document_type')},
        ),
        migrations.AlterUniqueTogether(
            name='holding',
            unique_together={('portfolio', 'stock')},
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['customer', 'status'], name='core_contra_custome_469837_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['sgi', 'status'], name='core_contra_sgi_id_7c812f_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['contract_number'], name='core_contra_contrac_fac21c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='competitionparticipant',
            unique_together={('competition', 'user')},
        ),
        migrations.AddIndex(
            model_name='commentairearticle',
            index=models.Index(fields=['article', 'statut'], name='core_commen_article_4ea2e6_idx'),
        ),
        migrations.AddIndex(
            model_name='commentairearticle',
            index=models.Index(fields=['auteur', 'statut'], name='core_commen_auteur__b70340_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clientsgiinteraction',
            unique_together={('client_profile', 'sgi', 'interaction_type', 'created_at')},
        ),
        migrations.AlterUniqueTogether(
            name='challengeparticipation',
            unique_together={('user', 'challenge')},
        ),
        migrations.AlterUniqueTogether(
            name='challengeleaderboard',
            unique_together={('challenge', 'participation')},
        ),
        migrations.AlterUniqueTogether(
            name='certification',
            unique_together={('student', 'learning_path')},
        ),
        migrations.AddIndex(
            model_name='banniere',
            index=models.Index(fields=['position', 'is_active'], name='core_bannie_positio_a98376_idx'),
        ),
        migrations.AddIndex(
            model_name='banniere',
            index=models.Index(fields=['date_debut', 'date_fin'], name='core_bannie_date_de_8844d4_idx'),
        ),
        migrations.AddIndex(
            model_name='actualites',
            index=models.Index(fields=['statut', 'acces'], name='core_actual_statut_a00ba6_idx'),
        ),
        migrations.AddIndex(
            model_name='actualites',
            index=models.Index(fields=['categorie', 'statut'], name='core_actual_categor_32c17a_idx'),
        ),
        migrations.AddIndex(
            model_name='actualites',
            index=models.Index(fields=['date_publication', 'statut'], name='core_actual_date_pu_7c161d_idx'),
        ),
        migrations.AddIndex(
            model_name='actualites',
            index=models.Index(fields=['is_featured', 'statut'], name='core_actual_is_feat_5df331_idx'),
        ),
        migrations.AddIndex(
            model_name='actualites',
            index=models.Index(fields=['slug'], name='core_actual_slug_14c4fd_idx'),
        ),
    ]
