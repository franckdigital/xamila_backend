#!/usr/bin/env python
"""
Script pour corriger l'ID admin - diff√©rence d'un caract√®re d√©tect√©e
"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'xamila.settings')
django.setup()

from django.contrib.auth import get_user_model
from core.models_permissions import Permission, RolePermission

User = get_user_model()

def fix_admin_id_exact():
    """
    Corrige l'ID admin - diff√©rence d√©tect√©e entre token JWT et admin cr√©√©
    """
    # ID dans le token JWT (correct)
    correct_id = "30039510-2cc1-41b5-a483-b668513cd4e8"
    
    # ID de l'admin cr√©√© (incorrect - diff√©rence d'un caract√®re √† la fin)
    wrong_id = "30039510-2cc1-41b5-a483-b668513cd4e9"
    
    print("üîß CORRECTION ID ADMIN")
    print("=" * 60)
    print(f"ID Token JWT (correct): {correct_id}")
    print(f"ID Admin cr√©√© (wrong):  {wrong_id}")
    print(f"Diff√©rence d√©tect√©e:    Dernier caract√®re (8 vs 9)")
    
    # 1. Supprimer l'admin avec l'ID incorrect
    try:
        wrong_admin = User.objects.get(id=wrong_id)
        print(f"\n‚ùå Suppression admin avec ID incorrect:")
        print(f"   Email: {wrong_admin.email}")
        print(f"   Username: {wrong_admin.username}")
        
        # Supprimer les permissions associ√©es √† cet admin sp√©cifiquement
        # (on garde les permissions g√©n√©rales ADMIN pour le nouvel admin)
        wrong_admin.delete()
        print(f"   ‚úÖ Admin supprim√©")
        
    except User.DoesNotExist:
        print(f"\n‚ö†Ô∏è  Aucun admin trouv√© avec l'ID incorrect")
    
    # 2. Cr√©er l'admin avec l'ID exact du token JWT
    try:
        correct_admin = User.objects.get(id=correct_id)
        print(f"\n‚úÖ Admin avec ID correct existe d√©j√†:")
        print(f"   Email: {correct_admin.email}")
        
    except User.DoesNotExist:
        print(f"\nüîß Cr√©ation admin avec ID exact du token JWT:")
        
        correct_admin = User.objects.create_user(
            id=correct_id,
            email="franckalain.digital@gmail.com",
            username="franckalain.digital",
            first_name="franck",
            last_name="alain",
            role="ADMIN",
            is_staff=True,
            is_superuser=True,
            is_active=True,
            is_verified=True,
            password="XamilaAdmin2025!"
        )
        
        print(f"   ‚úÖ Admin cr√©√©:")
        print(f"   ID: {correct_admin.id}")
        print(f"   Email: {correct_admin.email}")
    
    # 3. V√©rifier et cr√©er les permissions
    create_default_permissions()
    assign_admin_permissions()
    
    print(f"\n" + "=" * 60)
    print(f"‚úÖ CORRECTION TERMIN√âE")
    print(f"   ID exact du token JWT: {correct_id}")
    print(f"   Admin configur√© avec cet ID exact")
    print(f"   Les switches de permissions fonctionneront maintenant")
    print("=" * 60)

def create_default_permissions():
    """Cr√©e les permissions par d√©faut"""
    permissions_data = [
        {'code': 'dashboard.view', 'name': 'Voir Dashboard', 'category': 'Dashboard', 'description': 'Acc√©der au tableau de bord'},
        {'code': 'dashboard.admin', 'name': 'Dashboard Admin', 'category': 'Dashboard', 'description': 'Acc√©der au dashboard administrateur'},
        {'code': 'users.view', 'name': 'Voir Utilisateurs', 'category': 'Gestion', 'description': 'Consulter la liste des utilisateurs'},
        {'code': 'users.create', 'name': 'Cr√©er Utilisateurs', 'category': 'Gestion', 'description': 'Cr√©er de nouveaux utilisateurs'},
        {'code': 'users.edit', 'name': 'Modifier Utilisateurs', 'category': 'Gestion', 'description': 'Modifier les utilisateurs existants'},
        {'code': 'users.delete', 'name': 'Supprimer Utilisateurs', 'category': 'Gestion', 'description': 'Supprimer des utilisateurs'},
        {'code': 'savings.view', 'name': 'Voir √âpargne', 'category': '√âpargne', 'description': 'Consulter les donn√©es d\'√©pargne'},
        {'code': 'savings.manage', 'name': 'G√©rer √âpargne', 'category': '√âpargne', 'description': 'Administrer les comptes d\'√©pargne'},
        {'code': 'savings.challenges', 'name': 'Challenges √âpargne', 'category': '√âpargne', 'description': 'G√©rer les d√©fis d\'√©pargne'},
        {'code': 'education.view', 'name': 'Voir Formation', 'category': 'Formation', 'description': 'Acc√©der aux contenus √©ducatifs'},
        {'code': 'education.manage', 'name': 'G√©rer Formation', 'category': 'Formation', 'description': 'Administrer les formations'},
        {'code': 'education.create', 'name': 'Cr√©er Formation', 'category': 'Formation', 'description': 'Cr√©er du contenu √©ducatif'},
        {'code': 'investments.view', 'name': 'Voir Investissements', 'category': 'Investissement', 'description': 'Consulter les investissements'},
        {'code': 'investments.manage', 'name': 'G√©rer Investissements', 'category': 'Investissement', 'description': 'Administrer les investissements'},
        {'code': 'sgi.view', 'name': 'Voir SGI', 'category': 'SGI', 'description': 'Consulter les SGI'},
        {'code': 'sgi.manage', 'name': 'G√©rer SGI', 'category': 'SGI', 'description': 'Administrer les SGI'},
        {'code': 'sgi.clients', 'name': 'Clients SGI', 'category': 'SGI', 'description': 'G√©rer les clients de la SGI'},
        {'code': 'support.tickets', 'name': 'Tickets Support', 'category': 'Support', 'description': 'G√©rer les tickets de support'},
        {'code': 'support.respond', 'name': 'R√©pondre Support', 'category': 'Support', 'description': 'R√©pondre aux demandes de support'},
        {'code': 'support.create', 'name': 'Cr√©er Tickets Support', 'category': 'Support', 'description': 'Cr√©er des tickets de support'}
    ]
    
    created_count = 0
    for perm_data in permissions_data:
        permission, created = Permission.objects.get_or_create(
            code=perm_data['code'],
            defaults={
                'name': perm_data['name'],
                'category': perm_data['category'],
                'description': perm_data['description']
            }
        )
        if created:
            created_count += 1
    
    print(f"üìã Permissions cr√©√©es: {created_count}/{len(permissions_data)}")

def assign_admin_permissions():
    """Assigne toutes les permissions √† l'admin"""
    permissions = Permission.objects.all()
    assigned_count = 0
    
    for permission in permissions:
        role_permission, created = RolePermission.objects.get_or_create(
            role="ADMIN",
            permission=permission,
            defaults={'is_granted': True}
        )
        if created or not role_permission.is_granted:
            role_permission.is_granted = True
            role_permission.save()
            assigned_count += 1
    
    print(f"üîë Permissions assign√©es: {assigned_count}")

if __name__ == '__main__':
    fix_admin_id_exact()
