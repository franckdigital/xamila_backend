#!/usr/bin/env python
"""
Script pour lister tous les utilisateurs de la base de donn√©es Xamila
"""
import os
import sys
import django
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'xamila.settings')
django.setup()

from django.contrib.auth import get_user_model
from django.db.models import Count

User = get_user_model()

def list_all_users():
    """Liste tous les utilisateurs avec leurs informations d√©taill√©es"""
    
    print("=" * 80)
    print("                    LISTE DES UTILISATEURS XAMILA")
    print("=" * 80)
    
    try:
        # R√©cup√©rer tous les utilisateurs
        users = User.objects.all().order_by('-created_at')
        total_users = users.count()
        
        print(f"\nüìä STATISTIQUES G√âN√âRALES")
        print(f"   Total utilisateurs: {total_users}")
        
        # Statistiques par r√¥le
        role_stats = User.objects.values('role').annotate(count=Count('role')).order_by('role')
        print(f"\nüìã R√âPARTITION PAR R√îLE:")
        for stat in role_stats:
            role_name = stat['role'] or 'Non d√©fini'
            count = stat['count']
            print(f"   {role_name}: {count} utilisateur(s)")
        
        # Statistiques par statut
        active_users = User.objects.filter(is_active=True).count()
        verified_users = User.objects.filter(is_verified=True).count()
        staff_users = User.objects.filter(is_staff=True).count()
        superusers = User.objects.filter(is_superuser=True).count()
        
        print(f"\nüîê STATUTS:")
        print(f"   Actifs: {active_users}")
        print(f"   V√©rifi√©s: {verified_users}")
        print(f"   Staff: {staff_users}")
        print(f"   Superusers: {superusers}")
        
        print(f"\n" + "=" * 80)
        print("                      D√âTAIL DES UTILISATEURS")
        print("=" * 80)
        
        if total_users == 0:
            print("\n‚ùå Aucun utilisateur trouv√© dans la base de donn√©es")
            return
        
        # Afficher chaque utilisateur
        for i, user in enumerate(users, 1):
            print(f"\nüë§ UTILISATEUR #{i}")
            print(f"   ID: {user.id}")
            print(f"   Username: {user.username}")
            print(f"   Email: {user.email}")
            print(f"   Nom: {user.first_name} {user.last_name}")
            print(f"   T√©l√©phone: {user.phone or 'Non renseign√©'}")
            print(f"   R√¥le: {user.role}")
            
            # Informations g√©ographiques
            if user.country_of_residence or user.country_of_origin:
                print(f"   Pays r√©sidence: {user.country_of_residence or 'Non renseign√©'}")
                print(f"   Pays origine: {user.country_of_origin or 'Non renseign√©'}")
            
            # Statuts
            statuses = []
            if user.is_active:
                statuses.append("‚úÖ Actif")
            else:
                statuses.append("‚ùå Inactif")
            
            if user.is_verified:
                statuses.append("‚úÖ V√©rifi√©")
            else:
                statuses.append("‚è≥ Non v√©rifi√©")
            
            if user.is_staff:
                statuses.append("üë®‚Äçüíº Staff")
            
            if user.is_superuser:
                statuses.append("üîë Superuser")
            
            print(f"   Statuts: {' | '.join(statuses)}")
            
            # V√©rifications email/t√©l√©phone
            verifications = []
            if user.email_verified:
                verifications.append("üìß Email v√©rifi√©")
            else:
                verifications.append("üìß Email non v√©rifi√©")
            
            if user.phone_verified:
                verifications.append("üì± T√©l√©phone v√©rifi√©")
            else:
                verifications.append("üì± T√©l√©phone non v√©rifi√©")
            
            print(f"   V√©rifications: {' | '.join(verifications)}")
            
            # Dates
            created_date = user.created_at.strftime("%d/%m/%Y %H:%M") if user.created_at else "Non disponible"
            updated_date = user.updated_at.strftime("%d/%m/%Y %H:%M") if user.updated_at else "Non disponible"
            last_login = user.last_login.strftime("%d/%m/%Y %H:%M") if user.last_login else "Jamais connect√©"
            
            print(f"   Cr√©√© le: {created_date}")
            print(f"   Modifi√© le: {updated_date}")
            print(f"   Derni√®re connexion: {last_login}")
            
            print("-" * 60)
        
        print(f"\n‚úÖ Affichage termin√© - {total_users} utilisateur(s) list√©(s)")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la r√©cup√©ration des utilisateurs: {e}")
        return False
    
    return True

def search_user_by_id(user_id):
    """Recherche un utilisateur sp√©cifique par ID"""
    
    print(f"\nüîç RECHERCHE UTILISATEUR ID: {user_id}")
    print("-" * 50)
    
    try:
        user = User.objects.get(id=user_id)
        
        print(f"‚úÖ Utilisateur trouv√©:")
        print(f"   ID: {user.id}")
        print(f"   Username: {user.username}")
        print(f"   Email: {user.email}")
        print(f"   Nom complet: {user.first_name} {user.last_name}")
        print(f"   R√¥le: {user.role}")
        print(f"   Actif: {'Oui' if user.is_active else 'Non'}")
        print(f"   Staff: {'Oui' if user.is_staff else 'Non'}")
        print(f"   Superuser: {'Oui' if user.is_superuser else 'Non'}")
        
        return True
        
    except User.DoesNotExist:
        print(f"‚ùå Aucun utilisateur trouv√© avec l'ID: {user_id}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la recherche: {e}")
        return False

def search_admin_users():
    """Liste uniquement les utilisateurs admin"""
    
    print(f"\nüëë UTILISATEURS ADMINISTRATEURS")
    print("-" * 50)
    
    try:
        admins = User.objects.filter(role='ADMIN').order_by('-created_at')
        
        if not admins.exists():
            print("‚ùå Aucun administrateur trouv√©")
            return False
        
        for admin in admins:
            print(f"\nüë§ {admin.username}")
            print(f"   ID: {admin.id}")
            print(f"   Email: {admin.email}")
            print(f"   Nom: {admin.first_name} {admin.last_name}")
            print(f"   Actif: {'‚úÖ' if admin.is_active else '‚ùå'}")
            print(f"   Staff: {'‚úÖ' if admin.is_staff else '‚ùå'}")
            print(f"   Superuser: {'‚úÖ' if admin.is_superuser else '‚ùå'}")
            print(f"   Cr√©√©: {admin.created_at.strftime('%d/%m/%Y %H:%M') if admin.created_at else 'N/A'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la recherche des admins: {e}")
        return False

if __name__ == '__main__':
    print(f"üöÄ Script ex√©cut√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}")
    
    # V√©rifier les arguments de ligne de commande
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'admin' or command == 'admins':
            # Lister uniquement les admins
            search_admin_users()
        elif command.startswith('id:'):
            # Rechercher par ID
            user_id = command.split(':', 1)[1]
            search_user_by_id(user_id)
        else:
            print(f"‚ùå Commande inconnue: {command}")
            print("Usage:")
            print("  python list_all_users.py           # Lister tous les utilisateurs")
            print("  python list_all_users.py admin     # Lister uniquement les admins")
            print("  python list_all_users.py id:UUID   # Rechercher par ID")
    else:
        # Lister tous les utilisateurs par d√©faut
        list_all_users()
