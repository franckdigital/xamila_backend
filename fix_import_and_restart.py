#!/usr/bin/env python3
"""
Script pour corriger les imports et red√©marrer le serveur Django
"""

import subprocess
import sys
import os
import time

def run_command(command, description, cwd=None):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"\n{'='*50}")
    print(f"√âTAPE: {description}")
    print(f"COMMANDE: {command}")
    print(f"{'='*50}")
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True, 
            cwd=cwd,
            timeout=300
        )
        
        if result.stdout:
            print("SORTIE:")
            print(result.stdout)
        
        if result.stderr:
            print("ERREURS:")
            print(result.stderr)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - SUCC√àS")
            return True
        else:
            print(f"‚ùå {description} - √âCHEC (code: {result.returncode})")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - TIMEOUT")
        return False
    except Exception as e:
        print(f"üí• {description} - ERREUR: {str(e)}")
        return False

def main():
    """Fonction principale de correction et red√©marrage"""
    print("üîß CORRECTION DES IMPORTS ET RED√âMARRAGE DJANGO")
    print("=" * 60)
    
    # Configuration
    backend_dir = "/var/www/xamila/xamila_backend"
    
    steps = [
        {
            "command": "cd /var/www/xamila/xamila_backend && git pull origin master",
            "description": "R√©cup√©ration des derni√®res modifications",
            "cwd": None
        },
        {
            "command": "cd /var/www/xamila/xamila_backend && python manage.py check",
            "description": "V√©rification de la configuration Django",
            "cwd": None
        },
        {
            "command": "cd /var/www/xamila/xamila_backend && python manage.py collectstatic --noinput",
            "description": "Collecte des fichiers statiques",
            "cwd": None
        },
        {
            "command": "sudo systemctl restart xamila-backend",
            "description": "Red√©marrage du service Django",
            "cwd": None
        },
        {
            "command": "sudo systemctl status xamila-backend --no-pager",
            "description": "V√©rification du statut du service",
            "cwd": None
        },
        {
            "command": "curl -s -o /dev/null -w '%{http_code}' https://api.xamila.finance/api/auth/login/",
            "description": "Test de connectivit√© API",
            "cwd": None
        }
    ]
    
    success_count = 0
    total_steps = len(steps)
    
    for i, step in enumerate(steps, 1):
        print(f"\nüìã √âTAPE {i}/{total_steps}")
        success = run_command(
            step["command"], 
            step["description"], 
            step.get("cwd")
        )
        
        if success:
            success_count += 1
        else:
            print(f"\n‚ö†Ô∏è  √âCHEC √Ä L'√âTAPE {i}: {step['description']}")
            
            # Pour certaines √©tapes, on peut continuer
            if "collectstatic" in step["command"] or "curl" in step["command"]:
                print("‚è≠Ô∏è  Continuation malgr√© l'√©chec (√©tape non critique)")
                continue
            elif "python manage.py check" in step["command"]:
                print("üõë Arr√™t - Configuration Django invalide")
                break
            else:
                print("üõë Arr√™t du processus en raison de l'√©chec")
                break
        
        # Pause entre les √©tapes
        if i < total_steps:
            time.sleep(2)
    
    # R√©sum√© final
    print(f"\n{'='*60}")
    print("üìä R√âSUM√â DE LA CORRECTION")
    print(f"{'='*60}")
    print(f"√âtapes r√©ussies: {success_count}/{total_steps}")
    
    if success_count >= total_steps - 1:  # Tol√©rer 1 √©chec
        print("üéâ CORRECTION R√âUSSIE!")
        print("\nüìã ENDPOINTS COHORT ACCESS D√âPLOY√âS:")
        print("- GET /api/user/cohort-access/ - V√©rification acc√®s cohorte")
        print("- POST /api/user/join-cohort/ - Adh√©sion via code cohorte")
        print("- GET /api/user/cohorts/ - Liste des cohortes utilisateur")
        
        print("\nüß™ TESTS RECOMMAND√âS:")
        print("1. Tester l'authentification API")
        print("2. Tester les endpoints de cohort access")
        print("3. V√©rifier le fonctionnement du frontend")
        
    else:
        print("‚ùå CORRECTION √âCHOU√âE")
        print("üîß V√©rifiez les erreurs ci-dessus et relancez si n√©cessaire")
    
    return success_count >= total_steps - 1

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
